generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int       @id @default(autoincrement()) @map("id")
  isClient  Boolean
  email     String    @unique
  password  String
  name      String
  point     Int       @default(0)
  nickname  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Likes   Likes[]   @relation("LikesToUser")
  Orders  Orders[]  @relation("OrdersToUser")
  Reviews Reviews[] @relation("ReviewsToUser")
  Store   Stores?   @relation("UserToStore")
}

model Stores {
  storeId          Int       @id @default(autoincrement()) @map("id")
  name             String
  longitude        Float
  latitude         Float
  address          String
  storePhoneNumber String?
  category         String
  managementNumber String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?
  ownerId          Int?      @unique

  Owner   Users?    @relation("UserToStore", fields: [ownerId], references: [userId])
  Likes   Likes[]   @relation("LikesToStore")
  Items   Items[]   @relation("ItemsToStore")
  Reviews Reviews[] @relation("ReviewsToStore")
  Alarms  Alarms[]
  Orders  Orders[]
}

model Likes {
  likeId    Int      @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now())

  User   Users @relation("LikesToUser", fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  Store   Stores @relation("LikesToStore", fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId Int
}

model Reviews {
  reviewId  Int       @id @default(autoincrement()) @map("id")
  content   String
  star      Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  Store   Stores @relation("ReviewsToStore", fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId Int

  User   Users @relation("ReviewsToUser", fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  Order   Orders @relation(fields: [orderId], references: [orderId])
  orderId Int    @unique
}

model Orders {
  orderId    Int       @id @default(autoincrement()) @map("id")
  discount   Int
  totalPrice Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  ordered    Boolean   @default(false)

  User   Users @relation("OrdersToUser", fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  Store   Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId Int

  Review Reviews?

  OrdersItems OrdersItems[]
}

model OrdersItems {
  orderItemId Int @id @default(autoincrement()) @map("id")
  count       Int

  Order   Orders @relation(fields: [orderId], references: [orderId])
  orderId Int

  Item   Items @relation(fields: [itemId], references: [itemId])
  itemId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Items {
  itemId    Int       @id @default(autoincrement()) @map("id")
  name      String
  prevPrice Int
  price     Int
  count     Int
  startTime DateTime
  endTime   DateTime
  imgUrl    String?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Store   Stores @relation("ItemsToStore", fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId Int

  OrdersItems OrdersItems[]
}

model Alarms {
  alarmId   Int      @id @default(autoincrement()) @map("id")
  title     String
  content   String
  createdAt DateTime @default(now())

  Store   Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId Int
}
