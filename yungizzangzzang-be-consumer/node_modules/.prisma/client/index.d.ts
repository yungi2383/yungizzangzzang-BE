
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Stores
 * 
 */
export type Stores = $Result.DefaultSelection<Prisma.$StoresPayload>
/**
 * Model Likes
 * 
 */
export type Likes = $Result.DefaultSelection<Prisma.$LikesPayload>
/**
 * Model Reviews
 * 
 */
export type Reviews = $Result.DefaultSelection<Prisma.$ReviewsPayload>
/**
 * Model Orders
 * 
 */
export type Orders = $Result.DefaultSelection<Prisma.$OrdersPayload>
/**
 * Model OrdersItems
 * 
 */
export type OrdersItems = $Result.DefaultSelection<Prisma.$OrdersItemsPayload>
/**
 * Model Items
 * 
 */
export type Items = $Result.DefaultSelection<Prisma.$ItemsPayload>
/**
 * Model Alarms
 * 
 */
export type Alarms = $Result.DefaultSelection<Prisma.$AlarmsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.stores`: Exposes CRUD operations for the **Stores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.stores.findMany()
    * ```
    */
  get stores(): Prisma.StoresDelegate<ExtArgs>;

  /**
   * `prisma.likes`: Exposes CRUD operations for the **Likes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.likes.findMany()
    * ```
    */
  get likes(): Prisma.LikesDelegate<ExtArgs>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **Reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.ReviewsDelegate<ExtArgs>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **Orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.OrdersDelegate<ExtArgs>;

  /**
   * `prisma.ordersItems`: Exposes CRUD operations for the **OrdersItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrdersItems
    * const ordersItems = await prisma.ordersItems.findMany()
    * ```
    */
  get ordersItems(): Prisma.OrdersItemsDelegate<ExtArgs>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **Items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.ItemsDelegate<ExtArgs>;

  /**
   * `prisma.alarms`: Exposes CRUD operations for the **Alarms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alarms
    * const alarms = await prisma.alarms.findMany()
    * ```
    */
  get alarms(): Prisma.AlarmsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Stores: 'Stores',
    Likes: 'Likes',
    Reviews: 'Reviews',
    Orders: 'Orders',
    OrdersItems: 'OrdersItems',
    Items: 'Items',
    Alarms: 'Alarms'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'stores' | 'likes' | 'reviews' | 'orders' | 'ordersItems' | 'items' | 'alarms'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Stores: {
        payload: Prisma.$StoresPayload<ExtArgs>
        fields: Prisma.StoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload>
          }
          findFirst: {
            args: Prisma.StoresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload>
          }
          findMany: {
            args: Prisma.StoresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload>[]
          }
          create: {
            args: Prisma.StoresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload>
          }
          createMany: {
            args: Prisma.StoresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StoresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload>
          }
          update: {
            args: Prisma.StoresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload>
          }
          deleteMany: {
            args: Prisma.StoresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StoresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StoresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoresPayload>
          }
          aggregate: {
            args: Prisma.StoresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStores>
          }
          groupBy: {
            args: Prisma.StoresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoresCountArgs<ExtArgs>,
            result: $Utils.Optional<StoresCountAggregateOutputType> | number
          }
        }
      }
      Likes: {
        payload: Prisma.$LikesPayload<ExtArgs>
        fields: Prisma.LikesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          findFirst: {
            args: Prisma.LikesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          findMany: {
            args: Prisma.LikesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>[]
          }
          create: {
            args: Prisma.LikesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          createMany: {
            args: Prisma.LikesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LikesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          update: {
            args: Prisma.LikesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          deleteMany: {
            args: Prisma.LikesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LikesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LikesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          aggregate: {
            args: Prisma.LikesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLikes>
          }
          groupBy: {
            args: Prisma.LikesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LikesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikesCountArgs<ExtArgs>,
            result: $Utils.Optional<LikesCountAggregateOutputType> | number
          }
        }
      }
      Reviews: {
        payload: Prisma.$ReviewsPayload<ExtArgs>
        fields: Prisma.ReviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload>
          }
          findFirst: {
            args: Prisma.ReviewsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload>
          }
          findMany: {
            args: Prisma.ReviewsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload>[]
          }
          create: {
            args: Prisma.ReviewsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload>
          }
          createMany: {
            args: Prisma.ReviewsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReviewsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload>
          }
          update: {
            args: Prisma.ReviewsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload>
          }
          deleteMany: {
            args: Prisma.ReviewsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReviewsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewsPayload>
          }
          aggregate: {
            args: Prisma.ReviewsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReviews>
          }
          groupBy: {
            args: Prisma.ReviewsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewsCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewsCountAggregateOutputType> | number
          }
        }
      }
      Orders: {
        payload: Prisma.$OrdersPayload<ExtArgs>
        fields: Prisma.OrdersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrdersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrdersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload>
          }
          findFirst: {
            args: Prisma.OrdersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrdersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload>
          }
          findMany: {
            args: Prisma.OrdersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload>[]
          }
          create: {
            args: Prisma.OrdersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload>
          }
          createMany: {
            args: Prisma.OrdersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrdersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload>
          }
          update: {
            args: Prisma.OrdersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload>
          }
          deleteMany: {
            args: Prisma.OrdersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrdersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrdersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.OrdersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrdersCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      OrdersItems: {
        payload: Prisma.$OrdersItemsPayload<ExtArgs>
        fields: Prisma.OrdersItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrdersItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrdersItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload>
          }
          findFirst: {
            args: Prisma.OrdersItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrdersItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload>
          }
          findMany: {
            args: Prisma.OrdersItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload>[]
          }
          create: {
            args: Prisma.OrdersItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload>
          }
          createMany: {
            args: Prisma.OrdersItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrdersItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload>
          }
          update: {
            args: Prisma.OrdersItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload>
          }
          deleteMany: {
            args: Prisma.OrdersItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrdersItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrdersItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrdersItemsPayload>
          }
          aggregate: {
            args: Prisma.OrdersItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrdersItems>
          }
          groupBy: {
            args: Prisma.OrdersItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdersItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrdersItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdersItemsCountAggregateOutputType> | number
          }
        }
      }
      Items: {
        payload: Prisma.$ItemsPayload<ExtArgs>
        fields: Prisma.ItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findFirst: {
            args: Prisma.ItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findMany: {
            args: Prisma.ItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>[]
          }
          create: {
            args: Prisma.ItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          createMany: {
            args: Prisma.ItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          update: {
            args: Prisma.ItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          deleteMany: {
            args: Prisma.ItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          aggregate: {
            args: Prisma.ItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItems>
          }
          groupBy: {
            args: Prisma.ItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<ItemsCountAggregateOutputType> | number
          }
        }
      }
      Alarms: {
        payload: Prisma.$AlarmsPayload<ExtArgs>
        fields: Prisma.AlarmsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlarmsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlarmsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload>
          }
          findFirst: {
            args: Prisma.AlarmsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlarmsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload>
          }
          findMany: {
            args: Prisma.AlarmsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload>[]
          }
          create: {
            args: Prisma.AlarmsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload>
          }
          createMany: {
            args: Prisma.AlarmsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AlarmsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload>
          }
          update: {
            args: Prisma.AlarmsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload>
          }
          deleteMany: {
            args: Prisma.AlarmsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlarmsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlarmsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlarmsPayload>
          }
          aggregate: {
            args: Prisma.AlarmsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAlarms>
          }
          groupBy: {
            args: Prisma.AlarmsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlarmsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlarmsCountArgs<ExtArgs>,
            result: $Utils.Optional<AlarmsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    Likes: number
    Orders: number
    Reviews: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Likes?: boolean | UsersCountOutputTypeCountLikesArgs
    Orders?: boolean | UsersCountOutputTypeCountOrdersArgs
    Reviews?: boolean | UsersCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikesWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewsWhereInput
  }



  /**
   * Count Type StoresCountOutputType
   */

  export type StoresCountOutputType = {
    Likes: number
    Items: number
    Reviews: number
    Alarms: number
    Orders: number
  }

  export type StoresCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Likes?: boolean | StoresCountOutputTypeCountLikesArgs
    Items?: boolean | StoresCountOutputTypeCountItemsArgs
    Reviews?: boolean | StoresCountOutputTypeCountReviewsArgs
    Alarms?: boolean | StoresCountOutputTypeCountAlarmsArgs
    Orders?: boolean | StoresCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * StoresCountOutputType without action
   */
  export type StoresCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoresCountOutputType
     */
    select?: StoresCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StoresCountOutputType without action
   */
  export type StoresCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikesWhereInput
  }


  /**
   * StoresCountOutputType without action
   */
  export type StoresCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
  }


  /**
   * StoresCountOutputType without action
   */
  export type StoresCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewsWhereInput
  }


  /**
   * StoresCountOutputType without action
   */
  export type StoresCountOutputTypeCountAlarmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmsWhereInput
  }


  /**
   * StoresCountOutputType without action
   */
  export type StoresCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdersWhereInput
  }



  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    OrdersItems: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    OrdersItems?: boolean | OrdersCountOutputTypeCountOrdersItemsArgs
  }

  // Custom InputTypes

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountOrdersItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdersItemsWhereInput
  }



  /**
   * Count Type ItemsCountOutputType
   */

  export type ItemsCountOutputType = {
    OrdersItems: number
  }

  export type ItemsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    OrdersItems?: boolean | ItemsCountOutputTypeCountOrdersItemsArgs
  }

  // Custom InputTypes

  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemsCountOutputType
     */
    select?: ItemsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeCountOrdersItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdersItemsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    userId: number | null
    point: number | null
  }

  export type UsersSumAggregateOutputType = {
    userId: number | null
    point: number | null
  }

  export type UsersMinAggregateOutputType = {
    userId: number | null
    isClient: boolean | null
    email: string | null
    password: string | null
    name: string | null
    point: number | null
    nickname: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    userId: number | null
    isClient: boolean | null
    email: string | null
    password: string | null
    name: string | null
    point: number | null
    nickname: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    userId: number
    isClient: number
    email: number
    password: number
    name: number
    point: number
    nickname: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    userId?: true
    point?: true
  }

  export type UsersSumAggregateInputType = {
    userId?: true
    point?: true
  }

  export type UsersMinAggregateInputType = {
    userId?: true
    isClient?: true
    email?: true
    password?: true
    name?: true
    point?: true
    nickname?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    userId?: true
    isClient?: true
    email?: true
    password?: true
    name?: true
    point?: true
    nickname?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UsersCountAggregateInputType = {
    userId?: true
    isClient?: true
    email?: true
    password?: true
    name?: true
    point?: true
    nickname?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    userId: number
    isClient: boolean
    email: string
    password: string
    name: string
    point: number
    nickname: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    isClient?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    point?: boolean
    nickname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    Likes?: boolean | Users$LikesArgs<ExtArgs>
    Orders?: boolean | Users$OrdersArgs<ExtArgs>
    Reviews?: boolean | Users$ReviewsArgs<ExtArgs>
    Store?: boolean | Users$StoreArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    userId?: boolean
    isClient?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    point?: boolean
    nickname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Likes?: boolean | Users$LikesArgs<ExtArgs>
    Orders?: boolean | Users$OrdersArgs<ExtArgs>
    Reviews?: boolean | Users$ReviewsArgs<ExtArgs>
    Store?: boolean | Users$StoreArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      Likes: Prisma.$LikesPayload<ExtArgs>[]
      Orders: Prisma.$OrdersPayload<ExtArgs>[]
      Reviews: Prisma.$ReviewsPayload<ExtArgs>[]
      Store: Prisma.$StoresPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      isClient: boolean
      email: string
      password: string
      name: string
      point: number
      nickname: string
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Likes<T extends Users$LikesArgs<ExtArgs> = {}>(args?: Subset<T, Users$LikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Orders<T extends Users$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Users$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findMany'> | Null>;

    Reviews<T extends Users$ReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Users$ReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Store<T extends Users$StoreArgs<ExtArgs> = {}>(args?: Subset<T, Users$StoreArgs<ExtArgs>>): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly userId: FieldRef<"Users", 'Int'>
    readonly isClient: FieldRef<"Users", 'Boolean'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly name: FieldRef<"Users", 'String'>
    readonly point: FieldRef<"Users", 'Int'>
    readonly nickname: FieldRef<"Users", 'String'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
    readonly deletedAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.Likes
   */
  export type Users$LikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    where?: LikesWhereInput
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    cursor?: LikesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }


  /**
   * Users.Orders
   */
  export type Users$OrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    where?: OrdersWhereInput
    orderBy?: OrdersOrderByWithRelationInput | OrdersOrderByWithRelationInput[]
    cursor?: OrdersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * Users.Reviews
   */
  export type Users$ReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    where?: ReviewsWhereInput
    orderBy?: ReviewsOrderByWithRelationInput | ReviewsOrderByWithRelationInput[]
    cursor?: ReviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * Users.Store
   */
  export type Users$StoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    where?: StoresWhereInput
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Stores
   */

  export type AggregateStores = {
    _count: StoresCountAggregateOutputType | null
    _avg: StoresAvgAggregateOutputType | null
    _sum: StoresSumAggregateOutputType | null
    _min: StoresMinAggregateOutputType | null
    _max: StoresMaxAggregateOutputType | null
  }

  export type StoresAvgAggregateOutputType = {
    storeId: number | null
    longitude: number | null
    latitude: number | null
    ownerId: number | null
  }

  export type StoresSumAggregateOutputType = {
    storeId: number | null
    longitude: number | null
    latitude: number | null
    ownerId: number | null
  }

  export type StoresMinAggregateOutputType = {
    storeId: number | null
    name: string | null
    longitude: number | null
    latitude: number | null
    address: string | null
    storePhoneNumber: string | null
    category: string | null
    managementNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    ownerId: number | null
  }

  export type StoresMaxAggregateOutputType = {
    storeId: number | null
    name: string | null
    longitude: number | null
    latitude: number | null
    address: string | null
    storePhoneNumber: string | null
    category: string | null
    managementNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    ownerId: number | null
  }

  export type StoresCountAggregateOutputType = {
    storeId: number
    name: number
    longitude: number
    latitude: number
    address: number
    storePhoneNumber: number
    category: number
    managementNumber: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    ownerId: number
    _all: number
  }


  export type StoresAvgAggregateInputType = {
    storeId?: true
    longitude?: true
    latitude?: true
    ownerId?: true
  }

  export type StoresSumAggregateInputType = {
    storeId?: true
    longitude?: true
    latitude?: true
    ownerId?: true
  }

  export type StoresMinAggregateInputType = {
    storeId?: true
    name?: true
    longitude?: true
    latitude?: true
    address?: true
    storePhoneNumber?: true
    category?: true
    managementNumber?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    ownerId?: true
  }

  export type StoresMaxAggregateInputType = {
    storeId?: true
    name?: true
    longitude?: true
    latitude?: true
    address?: true
    storePhoneNumber?: true
    category?: true
    managementNumber?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    ownerId?: true
  }

  export type StoresCountAggregateInputType = {
    storeId?: true
    name?: true
    longitude?: true
    latitude?: true
    address?: true
    storePhoneNumber?: true
    category?: true
    managementNumber?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    ownerId?: true
    _all?: true
  }

  export type StoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to aggregate.
     */
    where?: StoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoresOrderByWithRelationInput | StoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stores
    **/
    _count?: true | StoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoresMaxAggregateInputType
  }

  export type GetStoresAggregateType<T extends StoresAggregateArgs> = {
        [P in keyof T & keyof AggregateStores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStores[P]>
      : GetScalarType<T[P], AggregateStores[P]>
  }




  export type StoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoresWhereInput
    orderBy?: StoresOrderByWithAggregationInput | StoresOrderByWithAggregationInput[]
    by: StoresScalarFieldEnum[] | StoresScalarFieldEnum
    having?: StoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoresCountAggregateInputType | true
    _avg?: StoresAvgAggregateInputType
    _sum?: StoresSumAggregateInputType
    _min?: StoresMinAggregateInputType
    _max?: StoresMaxAggregateInputType
  }

  export type StoresGroupByOutputType = {
    storeId: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber: string | null
    category: string
    managementNumber: string
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    ownerId: number | null
    _count: StoresCountAggregateOutputType | null
    _avg: StoresAvgAggregateOutputType | null
    _sum: StoresSumAggregateOutputType | null
    _min: StoresMinAggregateOutputType | null
    _max: StoresMaxAggregateOutputType | null
  }

  type GetStoresGroupByPayload<T extends StoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoresGroupByOutputType[P]>
            : GetScalarType<T[P], StoresGroupByOutputType[P]>
        }
      >
    >


  export type StoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    storeId?: boolean
    name?: boolean
    longitude?: boolean
    latitude?: boolean
    address?: boolean
    storePhoneNumber?: boolean
    category?: boolean
    managementNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    ownerId?: boolean
    Owner?: boolean | Stores$OwnerArgs<ExtArgs>
    Likes?: boolean | Stores$LikesArgs<ExtArgs>
    Items?: boolean | Stores$ItemsArgs<ExtArgs>
    Reviews?: boolean | Stores$ReviewsArgs<ExtArgs>
    Alarms?: boolean | Stores$AlarmsArgs<ExtArgs>
    Orders?: boolean | Stores$OrdersArgs<ExtArgs>
    _count?: boolean | StoresCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stores"]>

  export type StoresSelectScalar = {
    storeId?: boolean
    name?: boolean
    longitude?: boolean
    latitude?: boolean
    address?: boolean
    storePhoneNumber?: boolean
    category?: boolean
    managementNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    ownerId?: boolean
  }

  export type StoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Owner?: boolean | Stores$OwnerArgs<ExtArgs>
    Likes?: boolean | Stores$LikesArgs<ExtArgs>
    Items?: boolean | Stores$ItemsArgs<ExtArgs>
    Reviews?: boolean | Stores$ReviewsArgs<ExtArgs>
    Alarms?: boolean | Stores$AlarmsArgs<ExtArgs>
    Orders?: boolean | Stores$OrdersArgs<ExtArgs>
    _count?: boolean | StoresCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stores"
    objects: {
      Owner: Prisma.$UsersPayload<ExtArgs> | null
      Likes: Prisma.$LikesPayload<ExtArgs>[]
      Items: Prisma.$ItemsPayload<ExtArgs>[]
      Reviews: Prisma.$ReviewsPayload<ExtArgs>[]
      Alarms: Prisma.$AlarmsPayload<ExtArgs>[]
      Orders: Prisma.$OrdersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      storeId: number
      name: string
      longitude: number
      latitude: number
      address: string
      storePhoneNumber: string | null
      category: string
      managementNumber: string
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
      ownerId: number | null
    }, ExtArgs["result"]["stores"]>
    composites: {}
  }


  type StoresGetPayload<S extends boolean | null | undefined | StoresDefaultArgs> = $Result.GetResult<Prisma.$StoresPayload, S>

  type StoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StoresFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StoresCountAggregateInputType | true
    }

  export interface StoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stores'], meta: { name: 'Stores' } }
    /**
     * Find zero or one Stores that matches the filter.
     * @param {StoresFindUniqueArgs} args - Arguments to find a Stores
     * @example
     * // Get one Stores
     * const stores = await prisma.stores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StoresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StoresFindUniqueArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Stores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StoresFindUniqueOrThrowArgs} args - Arguments to find a Stores
     * @example
     * // Get one Stores
     * const stores = await prisma.stores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StoresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StoresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoresFindFirstArgs} args - Arguments to find a Stores
     * @example
     * // Get one Stores
     * const stores = await prisma.stores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StoresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StoresFindFirstArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Stores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoresFindFirstOrThrowArgs} args - Arguments to find a Stores
     * @example
     * // Get one Stores
     * const stores = await prisma.stores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StoresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StoresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.stores.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.stores.findMany({ take: 10 })
     * 
     * // Only select the `storeId`
     * const storesWithStoreIdOnly = await prisma.stores.findMany({ select: { storeId: true } })
     * 
    **/
    findMany<T extends StoresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Stores.
     * @param {StoresCreateArgs} args - Arguments to create a Stores.
     * @example
     * // Create one Stores
     * const Stores = await prisma.stores.create({
     *   data: {
     *     // ... data to create a Stores
     *   }
     * })
     * 
    **/
    create<T extends StoresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StoresCreateArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stores.
     *     @param {StoresCreateManyArgs} args - Arguments to create many Stores.
     *     @example
     *     // Create many Stores
     *     const stores = await prisma.stores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StoresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stores.
     * @param {StoresDeleteArgs} args - Arguments to delete one Stores.
     * @example
     * // Delete one Stores
     * const Stores = await prisma.stores.delete({
     *   where: {
     *     // ... filter to delete one Stores
     *   }
     * })
     * 
    **/
    delete<T extends StoresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StoresDeleteArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Stores.
     * @param {StoresUpdateArgs} args - Arguments to update one Stores.
     * @example
     * // Update one Stores
     * const stores = await prisma.stores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StoresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StoresUpdateArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stores.
     * @param {StoresDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.stores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StoresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const stores = await prisma.stores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StoresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StoresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stores.
     * @param {StoresUpsertArgs} args - Arguments to update or create a Stores.
     * @example
     * // Update or create a Stores
     * const stores = await prisma.stores.upsert({
     *   create: {
     *     // ... data to create a Stores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stores we want to update
     *   }
     * })
    **/
    upsert<T extends StoresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StoresUpsertArgs<ExtArgs>>
    ): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoresCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.stores.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends StoresCountArgs>(
      args?: Subset<T, StoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoresAggregateArgs>(args: Subset<T, StoresAggregateArgs>): Prisma.PrismaPromise<GetStoresAggregateType<T>>

    /**
     * Group by Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoresGroupByArgs['orderBy'] }
        : { orderBy?: StoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stores model
   */
  readonly fields: StoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Owner<T extends Stores$OwnerArgs<ExtArgs> = {}>(args?: Subset<T, Stores$OwnerArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Likes<T extends Stores$LikesArgs<ExtArgs> = {}>(args?: Subset<T, Stores$LikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Items<T extends Stores$ItemsArgs<ExtArgs> = {}>(args?: Subset<T, Stores$ItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Reviews<T extends Stores$ReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Stores$ReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Alarms<T extends Stores$AlarmsArgs<ExtArgs> = {}>(args?: Subset<T, Stores$AlarmsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Orders<T extends Stores$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Stores$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Stores model
   */ 
  interface StoresFieldRefs {
    readonly storeId: FieldRef<"Stores", 'Int'>
    readonly name: FieldRef<"Stores", 'String'>
    readonly longitude: FieldRef<"Stores", 'Float'>
    readonly latitude: FieldRef<"Stores", 'Float'>
    readonly address: FieldRef<"Stores", 'String'>
    readonly storePhoneNumber: FieldRef<"Stores", 'String'>
    readonly category: FieldRef<"Stores", 'String'>
    readonly managementNumber: FieldRef<"Stores", 'String'>
    readonly createdAt: FieldRef<"Stores", 'DateTime'>
    readonly updatedAt: FieldRef<"Stores", 'DateTime'>
    readonly deletedAt: FieldRef<"Stores", 'DateTime'>
    readonly ownerId: FieldRef<"Stores", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Stores findUnique
   */
  export type StoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where: StoresWhereUniqueInput
  }


  /**
   * Stores findUniqueOrThrow
   */
  export type StoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where: StoresWhereUniqueInput
  }


  /**
   * Stores findFirst
   */
  export type StoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoresOrderByWithRelationInput | StoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoresScalarFieldEnum | StoresScalarFieldEnum[]
  }


  /**
   * Stores findFirstOrThrow
   */
  export type StoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoresOrderByWithRelationInput | StoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoresScalarFieldEnum | StoresScalarFieldEnum[]
  }


  /**
   * Stores findMany
   */
  export type StoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoresOrderByWithRelationInput | StoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stores.
     */
    cursor?: StoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    distinct?: StoresScalarFieldEnum | StoresScalarFieldEnum[]
  }


  /**
   * Stores create
   */
  export type StoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * The data needed to create a Stores.
     */
    data: XOR<StoresCreateInput, StoresUncheckedCreateInput>
  }


  /**
   * Stores createMany
   */
  export type StoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stores.
     */
    data: StoresCreateManyInput | StoresCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Stores update
   */
  export type StoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * The data needed to update a Stores.
     */
    data: XOR<StoresUpdateInput, StoresUncheckedUpdateInput>
    /**
     * Choose, which Stores to update.
     */
    where: StoresWhereUniqueInput
  }


  /**
   * Stores updateMany
   */
  export type StoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stores.
     */
    data: XOR<StoresUpdateManyMutationInput, StoresUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoresWhereInput
  }


  /**
   * Stores upsert
   */
  export type StoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * The filter to search for the Stores to update in case it exists.
     */
    where: StoresWhereUniqueInput
    /**
     * In case the Stores found by the `where` argument doesn't exist, create a new Stores with this data.
     */
    create: XOR<StoresCreateInput, StoresUncheckedCreateInput>
    /**
     * In case the Stores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoresUpdateInput, StoresUncheckedUpdateInput>
  }


  /**
   * Stores delete
   */
  export type StoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
    /**
     * Filter which Stores to delete.
     */
    where: StoresWhereUniqueInput
  }


  /**
   * Stores deleteMany
   */
  export type StoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to delete
     */
    where?: StoresWhereInput
  }


  /**
   * Stores.Owner
   */
  export type Stores$OwnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }


  /**
   * Stores.Likes
   */
  export type Stores$LikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    where?: LikesWhereInput
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    cursor?: LikesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }


  /**
   * Stores.Items
   */
  export type Stores$ItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    cursor?: ItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Stores.Reviews
   */
  export type Stores$ReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    where?: ReviewsWhereInput
    orderBy?: ReviewsOrderByWithRelationInput | ReviewsOrderByWithRelationInput[]
    cursor?: ReviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * Stores.Alarms
   */
  export type Stores$AlarmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    where?: AlarmsWhereInput
    orderBy?: AlarmsOrderByWithRelationInput | AlarmsOrderByWithRelationInput[]
    cursor?: AlarmsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlarmsScalarFieldEnum | AlarmsScalarFieldEnum[]
  }


  /**
   * Stores.Orders
   */
  export type Stores$OrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    where?: OrdersWhereInput
    orderBy?: OrdersOrderByWithRelationInput | OrdersOrderByWithRelationInput[]
    cursor?: OrdersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * Stores without action
   */
  export type StoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stores
     */
    select?: StoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoresInclude<ExtArgs> | null
  }



  /**
   * Model Likes
   */

  export type AggregateLikes = {
    _count: LikesCountAggregateOutputType | null
    _avg: LikesAvgAggregateOutputType | null
    _sum: LikesSumAggregateOutputType | null
    _min: LikesMinAggregateOutputType | null
    _max: LikesMaxAggregateOutputType | null
  }

  export type LikesAvgAggregateOutputType = {
    likeId: number | null
    userId: number | null
    storeId: number | null
  }

  export type LikesSumAggregateOutputType = {
    likeId: number | null
    userId: number | null
    storeId: number | null
  }

  export type LikesMinAggregateOutputType = {
    likeId: number | null
    createdAt: Date | null
    userId: number | null
    storeId: number | null
  }

  export type LikesMaxAggregateOutputType = {
    likeId: number | null
    createdAt: Date | null
    userId: number | null
    storeId: number | null
  }

  export type LikesCountAggregateOutputType = {
    likeId: number
    createdAt: number
    userId: number
    storeId: number
    _all: number
  }


  export type LikesAvgAggregateInputType = {
    likeId?: true
    userId?: true
    storeId?: true
  }

  export type LikesSumAggregateInputType = {
    likeId?: true
    userId?: true
    storeId?: true
  }

  export type LikesMinAggregateInputType = {
    likeId?: true
    createdAt?: true
    userId?: true
    storeId?: true
  }

  export type LikesMaxAggregateInputType = {
    likeId?: true
    createdAt?: true
    userId?: true
    storeId?: true
  }

  export type LikesCountAggregateInputType = {
    likeId?: true
    createdAt?: true
    userId?: true
    storeId?: true
    _all?: true
  }

  export type LikesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to aggregate.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikesMaxAggregateInputType
  }

  export type GetLikesAggregateType<T extends LikesAggregateArgs> = {
        [P in keyof T & keyof AggregateLikes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikes[P]>
      : GetScalarType<T[P], AggregateLikes[P]>
  }




  export type LikesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikesWhereInput
    orderBy?: LikesOrderByWithAggregationInput | LikesOrderByWithAggregationInput[]
    by: LikesScalarFieldEnum[] | LikesScalarFieldEnum
    having?: LikesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikesCountAggregateInputType | true
    _avg?: LikesAvgAggregateInputType
    _sum?: LikesSumAggregateInputType
    _min?: LikesMinAggregateInputType
    _max?: LikesMaxAggregateInputType
  }

  export type LikesGroupByOutputType = {
    likeId: number
    createdAt: Date
    userId: number
    storeId: number
    _count: LikesCountAggregateOutputType | null
    _avg: LikesAvgAggregateOutputType | null
    _sum: LikesSumAggregateOutputType | null
    _min: LikesMinAggregateOutputType | null
    _max: LikesMaxAggregateOutputType | null
  }

  type GetLikesGroupByPayload<T extends LikesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikesGroupByOutputType[P]>
            : GetScalarType<T[P], LikesGroupByOutputType[P]>
        }
      >
    >


  export type LikesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    likeId?: boolean
    createdAt?: boolean
    userId?: boolean
    storeId?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Store?: boolean | StoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likes"]>

  export type LikesSelectScalar = {
    likeId?: boolean
    createdAt?: boolean
    userId?: boolean
    storeId?: boolean
  }

  export type LikesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Store?: boolean | StoresDefaultArgs<ExtArgs>
  }


  export type $LikesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Likes"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Store: Prisma.$StoresPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      likeId: number
      createdAt: Date
      userId: number
      storeId: number
    }, ExtArgs["result"]["likes"]>
    composites: {}
  }


  type LikesGetPayload<S extends boolean | null | undefined | LikesDefaultArgs> = $Result.GetResult<Prisma.$LikesPayload, S>

  type LikesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LikesCountAggregateInputType | true
    }

  export interface LikesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Likes'], meta: { name: 'Likes' } }
    /**
     * Find zero or one Likes that matches the filter.
     * @param {LikesFindUniqueArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LikesFindUniqueArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Likes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LikesFindUniqueOrThrowArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LikesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesFindFirstArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LikesFindFirstArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Likes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesFindFirstOrThrowArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LikesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.likes.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.likes.findMany({ take: 10 })
     * 
     * // Only select the `likeId`
     * const likesWithLikeIdOnly = await prisma.likes.findMany({ select: { likeId: true } })
     * 
    **/
    findMany<T extends LikesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Likes.
     * @param {LikesCreateArgs} args - Arguments to create a Likes.
     * @example
     * // Create one Likes
     * const Likes = await prisma.likes.create({
     *   data: {
     *     // ... data to create a Likes
     *   }
     * })
     * 
    **/
    create<T extends LikesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LikesCreateArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Likes.
     *     @param {LikesCreateManyArgs} args - Arguments to create many Likes.
     *     @example
     *     // Create many Likes
     *     const likes = await prisma.likes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LikesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Likes.
     * @param {LikesDeleteArgs} args - Arguments to delete one Likes.
     * @example
     * // Delete one Likes
     * const Likes = await prisma.likes.delete({
     *   where: {
     *     // ... filter to delete one Likes
     *   }
     * })
     * 
    **/
    delete<T extends LikesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LikesDeleteArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Likes.
     * @param {LikesUpdateArgs} args - Arguments to update one Likes.
     * @example
     * // Update one Likes
     * const likes = await prisma.likes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LikesUpdateArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Likes.
     * @param {LikesDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.likes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const likes = await prisma.likes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LikesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Likes.
     * @param {LikesUpsertArgs} args - Arguments to update or create a Likes.
     * @example
     * // Update or create a Likes
     * const likes = await prisma.likes.upsert({
     *   create: {
     *     // ... data to create a Likes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Likes we want to update
     *   }
     * })
    **/
    upsert<T extends LikesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LikesUpsertArgs<ExtArgs>>
    ): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.likes.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikesCountArgs>(
      args?: Subset<T, LikesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikesAggregateArgs>(args: Subset<T, LikesAggregateArgs>): Prisma.PrismaPromise<GetLikesAggregateType<T>>

    /**
     * Group by Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikesGroupByArgs['orderBy'] }
        : { orderBy?: LikesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Likes model
   */
  readonly fields: LikesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Likes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Store<T extends StoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoresDefaultArgs<ExtArgs>>): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Likes model
   */ 
  interface LikesFieldRefs {
    readonly likeId: FieldRef<"Likes", 'Int'>
    readonly createdAt: FieldRef<"Likes", 'DateTime'>
    readonly userId: FieldRef<"Likes", 'Int'>
    readonly storeId: FieldRef<"Likes", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Likes findUnique
   */
  export type LikesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where: LikesWhereUniqueInput
  }


  /**
   * Likes findUniqueOrThrow
   */
  export type LikesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where: LikesWhereUniqueInput
  }


  /**
   * Likes findFirst
   */
  export type LikesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }


  /**
   * Likes findFirstOrThrow
   */
  export type LikesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }


  /**
   * Likes findMany
   */
  export type LikesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }


  /**
   * Likes create
   */
  export type LikesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * The data needed to create a Likes.
     */
    data: XOR<LikesCreateInput, LikesUncheckedCreateInput>
  }


  /**
   * Likes createMany
   */
  export type LikesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikesCreateManyInput | LikesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Likes update
   */
  export type LikesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * The data needed to update a Likes.
     */
    data: XOR<LikesUpdateInput, LikesUncheckedUpdateInput>
    /**
     * Choose, which Likes to update.
     */
    where: LikesWhereUniqueInput
  }


  /**
   * Likes updateMany
   */
  export type LikesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikesUpdateManyMutationInput, LikesUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikesWhereInput
  }


  /**
   * Likes upsert
   */
  export type LikesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * The filter to search for the Likes to update in case it exists.
     */
    where: LikesWhereUniqueInput
    /**
     * In case the Likes found by the `where` argument doesn't exist, create a new Likes with this data.
     */
    create: XOR<LikesCreateInput, LikesUncheckedCreateInput>
    /**
     * In case the Likes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikesUpdateInput, LikesUncheckedUpdateInput>
  }


  /**
   * Likes delete
   */
  export type LikesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter which Likes to delete.
     */
    where: LikesWhereUniqueInput
  }


  /**
   * Likes deleteMany
   */
  export type LikesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikesWhereInput
  }


  /**
   * Likes without action
   */
  export type LikesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikesInclude<ExtArgs> | null
  }



  /**
   * Model Reviews
   */

  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    reviewId: number | null
    star: number | null
    storeId: number | null
    userId: number | null
    orderId: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    reviewId: number | null
    star: number | null
    storeId: number | null
    userId: number | null
    orderId: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    reviewId: number | null
    content: string | null
    star: number | null
    createdAt: Date | null
    deletedAt: Date | null
    storeId: number | null
    userId: number | null
    orderId: number | null
  }

  export type ReviewsMaxAggregateOutputType = {
    reviewId: number | null
    content: string | null
    star: number | null
    createdAt: Date | null
    deletedAt: Date | null
    storeId: number | null
    userId: number | null
    orderId: number | null
  }

  export type ReviewsCountAggregateOutputType = {
    reviewId: number
    content: number
    star: number
    createdAt: number
    deletedAt: number
    storeId: number
    userId: number
    orderId: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    reviewId?: true
    star?: true
    storeId?: true
    userId?: true
    orderId?: true
  }

  export type ReviewsSumAggregateInputType = {
    reviewId?: true
    star?: true
    storeId?: true
    userId?: true
    orderId?: true
  }

  export type ReviewsMinAggregateInputType = {
    reviewId?: true
    content?: true
    star?: true
    createdAt?: true
    deletedAt?: true
    storeId?: true
    userId?: true
    orderId?: true
  }

  export type ReviewsMaxAggregateInputType = {
    reviewId?: true
    content?: true
    star?: true
    createdAt?: true
    deletedAt?: true
    storeId?: true
    userId?: true
    orderId?: true
  }

  export type ReviewsCountAggregateInputType = {
    reviewId?: true
    content?: true
    star?: true
    createdAt?: true
    deletedAt?: true
    storeId?: true
    userId?: true
    orderId?: true
    _all?: true
  }

  export type ReviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to aggregate.
     */
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewsOrderByWithRelationInput | ReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type ReviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewsWhereInput
    orderBy?: ReviewsOrderByWithAggregationInput | ReviewsOrderByWithAggregationInput[]
    by: ReviewsScalarFieldEnum[] | ReviewsScalarFieldEnum
    having?: ReviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }

  export type ReviewsGroupByOutputType = {
    reviewId: number
    content: string
    star: number
    createdAt: Date
    deletedAt: Date | null
    storeId: number
    userId: number
    orderId: number
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends ReviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type ReviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reviewId?: boolean
    content?: boolean
    star?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    storeId?: boolean
    userId?: boolean
    orderId?: boolean
    Store?: boolean | StoresDefaultArgs<ExtArgs>
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Order?: boolean | OrdersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviews"]>

  export type ReviewsSelectScalar = {
    reviewId?: boolean
    content?: boolean
    star?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    storeId?: boolean
    userId?: boolean
    orderId?: boolean
  }

  export type ReviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Store?: boolean | StoresDefaultArgs<ExtArgs>
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Order?: boolean | OrdersDefaultArgs<ExtArgs>
  }


  export type $ReviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reviews"
    objects: {
      Store: Prisma.$StoresPayload<ExtArgs>
      User: Prisma.$UsersPayload<ExtArgs>
      Order: Prisma.$OrdersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      reviewId: number
      content: string
      star: number
      createdAt: Date
      deletedAt: Date | null
      storeId: number
      userId: number
      orderId: number
    }, ExtArgs["result"]["reviews"]>
    composites: {}
  }


  type ReviewsGetPayload<S extends boolean | null | undefined | ReviewsDefaultArgs> = $Result.GetResult<Prisma.$ReviewsPayload, S>

  type ReviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ReviewsCountAggregateInputType | true
    }

  export interface ReviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reviews'], meta: { name: 'Reviews' } }
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {ReviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewsFindUniqueArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reviews that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewsFindFirstArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `reviewId`
     * const reviewsWithReviewIdOnly = await prisma.reviews.findMany({ select: { reviewId: true } })
     * 
    **/
    findMany<T extends ReviewsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reviews.
     * @param {ReviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
    **/
    create<T extends ReviewsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewsCreateArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     *     @param {ReviewsCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const reviews = await prisma.reviews.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reviews.
     * @param {ReviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
    **/
    delete<T extends ReviewsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewsDeleteArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reviews.
     * @param {ReviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewsUpdateArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {ReviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewsUpsertArgs<ExtArgs>>
    ): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewsCountArgs>(
      args?: Subset<T, ReviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): Prisma.PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewsGroupByArgs['orderBy'] }
        : { orderBy?: ReviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reviews model
   */
  readonly fields: ReviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Store<T extends StoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoresDefaultArgs<ExtArgs>>): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Order<T extends OrdersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrdersDefaultArgs<ExtArgs>>): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reviews model
   */ 
  interface ReviewsFieldRefs {
    readonly reviewId: FieldRef<"Reviews", 'Int'>
    readonly content: FieldRef<"Reviews", 'String'>
    readonly star: FieldRef<"Reviews", 'Int'>
    readonly createdAt: FieldRef<"Reviews", 'DateTime'>
    readonly deletedAt: FieldRef<"Reviews", 'DateTime'>
    readonly storeId: FieldRef<"Reviews", 'Int'>
    readonly userId: FieldRef<"Reviews", 'Int'>
    readonly orderId: FieldRef<"Reviews", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Reviews findUnique
   */
  export type ReviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews findUniqueOrThrow
   */
  export type ReviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews findFirst
   */
  export type ReviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewsOrderByWithRelationInput | ReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * Reviews findFirstOrThrow
   */
  export type ReviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewsOrderByWithRelationInput | ReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * Reviews findMany
   */
  export type ReviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewsOrderByWithRelationInput | ReviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * Reviews create
   */
  export type ReviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a Reviews.
     */
    data: XOR<ReviewsCreateInput, ReviewsUncheckedCreateInput>
  }


  /**
   * Reviews createMany
   */
  export type ReviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewsCreateManyInput | ReviewsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reviews update
   */
  export type ReviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a Reviews.
     */
    data: XOR<ReviewsUpdateInput, ReviewsUncheckedUpdateInput>
    /**
     * Choose, which Reviews to update.
     */
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews updateMany
   */
  export type ReviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewsWhereInput
  }


  /**
   * Reviews upsert
   */
  export type ReviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the Reviews to update in case it exists.
     */
    where: ReviewsWhereUniqueInput
    /**
     * In case the Reviews found by the `where` argument doesn't exist, create a new Reviews with this data.
     */
    create: XOR<ReviewsCreateInput, ReviewsUncheckedCreateInput>
    /**
     * In case the Reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewsUpdateInput, ReviewsUncheckedUpdateInput>
  }


  /**
   * Reviews delete
   */
  export type ReviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    /**
     * Filter which Reviews to delete.
     */
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews deleteMany
   */
  export type ReviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewsWhereInput
  }


  /**
   * Reviews without action
   */
  export type ReviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
  }



  /**
   * Model Orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    orderId: number | null
    discount: number | null
    totalPrice: number | null
    userId: number | null
    storeId: number | null
  }

  export type OrdersSumAggregateOutputType = {
    orderId: number | null
    discount: number | null
    totalPrice: number | null
    userId: number | null
    storeId: number | null
  }

  export type OrdersMinAggregateOutputType = {
    orderId: number | null
    discount: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    ordered: boolean | null
    userId: number | null
    storeId: number | null
  }

  export type OrdersMaxAggregateOutputType = {
    orderId: number | null
    discount: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    ordered: boolean | null
    userId: number | null
    storeId: number | null
  }

  export type OrdersCountAggregateOutputType = {
    orderId: number
    discount: number
    totalPrice: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    ordered: number
    userId: number
    storeId: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    orderId?: true
    discount?: true
    totalPrice?: true
    userId?: true
    storeId?: true
  }

  export type OrdersSumAggregateInputType = {
    orderId?: true
    discount?: true
    totalPrice?: true
    userId?: true
    storeId?: true
  }

  export type OrdersMinAggregateInputType = {
    orderId?: true
    discount?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    ordered?: true
    userId?: true
    storeId?: true
  }

  export type OrdersMaxAggregateInputType = {
    orderId?: true
    discount?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    ordered?: true
    userId?: true
    storeId?: true
  }

  export type OrdersCountAggregateInputType = {
    orderId?: true
    discount?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    ordered?: true
    userId?: true
    storeId?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to aggregate.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrdersOrderByWithRelationInput | OrdersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type OrdersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdersWhereInput
    orderBy?: OrdersOrderByWithAggregationInput | OrdersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: OrdersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    orderId: number
    discount: number
    totalPrice: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    ordered: boolean
    userId: number
    storeId: number
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends OrdersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type OrdersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    discount?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    ordered?: boolean
    userId?: boolean
    storeId?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Store?: boolean | StoresDefaultArgs<ExtArgs>
    Review?: boolean | Orders$ReviewArgs<ExtArgs>
    OrdersItems?: boolean | Orders$OrdersItemsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type OrdersSelectScalar = {
    orderId?: boolean
    discount?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    ordered?: boolean
    userId?: boolean
    storeId?: boolean
  }

  export type OrdersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Store?: boolean | StoresDefaultArgs<ExtArgs>
    Review?: boolean | Orders$ReviewArgs<ExtArgs>
    OrdersItems?: boolean | Orders$OrdersItemsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrdersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Orders"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Store: Prisma.$StoresPayload<ExtArgs>
      Review: Prisma.$ReviewsPayload<ExtArgs> | null
      OrdersItems: Prisma.$OrdersItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      orderId: number
      discount: number
      totalPrice: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
      ordered: boolean
      userId: number
      storeId: number
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }


  type OrdersGetPayload<S extends boolean | null | undefined | OrdersDefaultArgs> = $Result.GetResult<Prisma.$OrdersPayload, S>

  type OrdersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrdersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface OrdersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Orders'], meta: { name: 'Orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {OrdersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrdersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersFindUniqueArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrdersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrdersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrdersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersFindFirstArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrdersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `orderId`
     * const ordersWithOrderIdOnly = await prisma.orders.findMany({ select: { orderId: true } })
     * 
    **/
    findMany<T extends OrdersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Orders.
     * @param {OrdersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends OrdersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersCreateArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {OrdersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrdersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {OrdersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends OrdersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersDeleteArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {OrdersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrdersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersUpdateArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrdersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrdersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrdersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {OrdersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends OrdersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersUpsertArgs<ExtArgs>>
    ): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrdersCountArgs>(
      args?: Subset<T, OrdersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersGroupByArgs['orderBy'] }
        : { orderBy?: OrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Orders model
   */
  readonly fields: OrdersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrdersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Store<T extends StoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoresDefaultArgs<ExtArgs>>): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Review<T extends Orders$ReviewArgs<ExtArgs> = {}>(args?: Subset<T, Orders$ReviewArgs<ExtArgs>>): Prisma__ReviewsClient<$Result.GetResult<Prisma.$ReviewsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    OrdersItems<T extends Orders$OrdersItemsArgs<ExtArgs> = {}>(args?: Subset<T, Orders$OrdersItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Orders model
   */ 
  interface OrdersFieldRefs {
    readonly orderId: FieldRef<"Orders", 'Int'>
    readonly discount: FieldRef<"Orders", 'Int'>
    readonly totalPrice: FieldRef<"Orders", 'Int'>
    readonly createdAt: FieldRef<"Orders", 'DateTime'>
    readonly updatedAt: FieldRef<"Orders", 'DateTime'>
    readonly deletedAt: FieldRef<"Orders", 'DateTime'>
    readonly ordered: FieldRef<"Orders", 'Boolean'>
    readonly userId: FieldRef<"Orders", 'Int'>
    readonly storeId: FieldRef<"Orders", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Orders findUnique
   */
  export type OrdersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders findUniqueOrThrow
   */
  export type OrdersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders findFirst
   */
  export type OrdersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrdersOrderByWithRelationInput | OrdersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * Orders findFirstOrThrow
   */
  export type OrdersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrdersOrderByWithRelationInput | OrdersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * Orders findMany
   */
  export type OrdersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrdersOrderByWithRelationInput | OrdersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * Orders create
   */
  export type OrdersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * The data needed to create a Orders.
     */
    data: XOR<OrdersCreateInput, OrdersUncheckedCreateInput>
  }


  /**
   * Orders createMany
   */
  export type OrdersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrdersCreateManyInput | OrdersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Orders update
   */
  export type OrdersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * The data needed to update a Orders.
     */
    data: XOR<OrdersUpdateInput, OrdersUncheckedUpdateInput>
    /**
     * Choose, which Orders to update.
     */
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders updateMany
   */
  export type OrdersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrdersWhereInput
  }


  /**
   * Orders upsert
   */
  export type OrdersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * The filter to search for the Orders to update in case it exists.
     */
    where: OrdersWhereUniqueInput
    /**
     * In case the Orders found by the `where` argument doesn't exist, create a new Orders with this data.
     */
    create: XOR<OrdersCreateInput, OrdersUncheckedCreateInput>
    /**
     * In case the Orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrdersUpdateInput, OrdersUncheckedUpdateInput>
  }


  /**
   * Orders delete
   */
  export type OrdersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
    /**
     * Filter which Orders to delete.
     */
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders deleteMany
   */
  export type OrdersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrdersWhereInput
  }


  /**
   * Orders.Review
   */
  export type Orders$ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reviews
     */
    select?: ReviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewsInclude<ExtArgs> | null
    where?: ReviewsWhereInput
  }


  /**
   * Orders.OrdersItems
   */
  export type Orders$OrdersItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    where?: OrdersItemsWhereInput
    orderBy?: OrdersItemsOrderByWithRelationInput | OrdersItemsOrderByWithRelationInput[]
    cursor?: OrdersItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersItemsScalarFieldEnum | OrdersItemsScalarFieldEnum[]
  }


  /**
   * Orders without action
   */
  export type OrdersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude<ExtArgs> | null
  }



  /**
   * Model OrdersItems
   */

  export type AggregateOrdersItems = {
    _count: OrdersItemsCountAggregateOutputType | null
    _avg: OrdersItemsAvgAggregateOutputType | null
    _sum: OrdersItemsSumAggregateOutputType | null
    _min: OrdersItemsMinAggregateOutputType | null
    _max: OrdersItemsMaxAggregateOutputType | null
  }

  export type OrdersItemsAvgAggregateOutputType = {
    orderItemId: number | null
    count: number | null
    orderId: number | null
    itemId: number | null
  }

  export type OrdersItemsSumAggregateOutputType = {
    orderItemId: number | null
    count: number | null
    orderId: number | null
    itemId: number | null
  }

  export type OrdersItemsMinAggregateOutputType = {
    orderItemId: number | null
    count: number | null
    orderId: number | null
    itemId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type OrdersItemsMaxAggregateOutputType = {
    orderItemId: number | null
    count: number | null
    orderId: number | null
    itemId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type OrdersItemsCountAggregateOutputType = {
    orderItemId: number
    count: number
    orderId: number
    itemId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type OrdersItemsAvgAggregateInputType = {
    orderItemId?: true
    count?: true
    orderId?: true
    itemId?: true
  }

  export type OrdersItemsSumAggregateInputType = {
    orderItemId?: true
    count?: true
    orderId?: true
    itemId?: true
  }

  export type OrdersItemsMinAggregateInputType = {
    orderItemId?: true
    count?: true
    orderId?: true
    itemId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrdersItemsMaxAggregateInputType = {
    orderItemId?: true
    count?: true
    orderId?: true
    itemId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrdersItemsCountAggregateInputType = {
    orderItemId?: true
    count?: true
    orderId?: true
    itemId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type OrdersItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrdersItems to aggregate.
     */
    where?: OrdersItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersItems to fetch.
     */
    orderBy?: OrdersItemsOrderByWithRelationInput | OrdersItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrdersItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrdersItems
    **/
    _count?: true | OrdersItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersItemsMaxAggregateInputType
  }

  export type GetOrdersItemsAggregateType<T extends OrdersItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrdersItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrdersItems[P]>
      : GetScalarType<T[P], AggregateOrdersItems[P]>
  }




  export type OrdersItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrdersItemsWhereInput
    orderBy?: OrdersItemsOrderByWithAggregationInput | OrdersItemsOrderByWithAggregationInput[]
    by: OrdersItemsScalarFieldEnum[] | OrdersItemsScalarFieldEnum
    having?: OrdersItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersItemsCountAggregateInputType | true
    _avg?: OrdersItemsAvgAggregateInputType
    _sum?: OrdersItemsSumAggregateInputType
    _min?: OrdersItemsMinAggregateInputType
    _max?: OrdersItemsMaxAggregateInputType
  }

  export type OrdersItemsGroupByOutputType = {
    orderItemId: number
    count: number
    orderId: number
    itemId: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: OrdersItemsCountAggregateOutputType | null
    _avg: OrdersItemsAvgAggregateOutputType | null
    _sum: OrdersItemsSumAggregateOutputType | null
    _min: OrdersItemsMinAggregateOutputType | null
    _max: OrdersItemsMaxAggregateOutputType | null
  }

  type GetOrdersItemsGroupByPayload<T extends OrdersItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersItemsGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersItemsGroupByOutputType[P]>
        }
      >
    >


  export type OrdersItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderItemId?: boolean
    count?: boolean
    orderId?: boolean
    itemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    Order?: boolean | OrdersDefaultArgs<ExtArgs>
    Item?: boolean | ItemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ordersItems"]>

  export type OrdersItemsSelectScalar = {
    orderItemId?: boolean
    count?: boolean
    orderId?: boolean
    itemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type OrdersItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Order?: boolean | OrdersDefaultArgs<ExtArgs>
    Item?: boolean | ItemsDefaultArgs<ExtArgs>
  }


  export type $OrdersItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrdersItems"
    objects: {
      Order: Prisma.$OrdersPayload<ExtArgs>
      Item: Prisma.$ItemsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      orderItemId: number
      count: number
      orderId: number
      itemId: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["ordersItems"]>
    composites: {}
  }


  type OrdersItemsGetPayload<S extends boolean | null | undefined | OrdersItemsDefaultArgs> = $Result.GetResult<Prisma.$OrdersItemsPayload, S>

  type OrdersItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrdersItemsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OrdersItemsCountAggregateInputType | true
    }

  export interface OrdersItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrdersItems'], meta: { name: 'OrdersItems' } }
    /**
     * Find zero or one OrdersItems that matches the filter.
     * @param {OrdersItemsFindUniqueArgs} args - Arguments to find a OrdersItems
     * @example
     * // Get one OrdersItems
     * const ordersItems = await prisma.ordersItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrdersItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OrdersItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrdersItemsFindUniqueOrThrowArgs} args - Arguments to find a OrdersItems
     * @example
     * // Get one OrdersItems
     * const ordersItems = await prisma.ordersItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrdersItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OrdersItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersItemsFindFirstArgs} args - Arguments to find a OrdersItems
     * @example
     * // Get one OrdersItems
     * const ordersItems = await prisma.ordersItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrdersItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersItemsFindFirstArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OrdersItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersItemsFindFirstOrThrowArgs} args - Arguments to find a OrdersItems
     * @example
     * // Get one OrdersItems
     * const ordersItems = await prisma.ordersItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrdersItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OrdersItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrdersItems
     * const ordersItems = await prisma.ordersItems.findMany()
     * 
     * // Get first 10 OrdersItems
     * const ordersItems = await prisma.ordersItems.findMany({ take: 10 })
     * 
     * // Only select the `orderItemId`
     * const ordersItemsWithOrderItemIdOnly = await prisma.ordersItems.findMany({ select: { orderItemId: true } })
     * 
    **/
    findMany<T extends OrdersItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OrdersItems.
     * @param {OrdersItemsCreateArgs} args - Arguments to create a OrdersItems.
     * @example
     * // Create one OrdersItems
     * const OrdersItems = await prisma.ordersItems.create({
     *   data: {
     *     // ... data to create a OrdersItems
     *   }
     * })
     * 
    **/
    create<T extends OrdersItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersItemsCreateArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OrdersItems.
     *     @param {OrdersItemsCreateManyArgs} args - Arguments to create many OrdersItems.
     *     @example
     *     // Create many OrdersItems
     *     const ordersItems = await prisma.ordersItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrdersItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrdersItems.
     * @param {OrdersItemsDeleteArgs} args - Arguments to delete one OrdersItems.
     * @example
     * // Delete one OrdersItems
     * const OrdersItems = await prisma.ordersItems.delete({
     *   where: {
     *     // ... filter to delete one OrdersItems
     *   }
     * })
     * 
    **/
    delete<T extends OrdersItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersItemsDeleteArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OrdersItems.
     * @param {OrdersItemsUpdateArgs} args - Arguments to update one OrdersItems.
     * @example
     * // Update one OrdersItems
     * const ordersItems = await prisma.ordersItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrdersItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersItemsUpdateArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OrdersItems.
     * @param {OrdersItemsDeleteManyArgs} args - Arguments to filter OrdersItems to delete.
     * @example
     * // Delete a few OrdersItems
     * const { count } = await prisma.ordersItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrdersItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrdersItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrdersItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrdersItems
     * const ordersItems = await prisma.ordersItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrdersItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrdersItems.
     * @param {OrdersItemsUpsertArgs} args - Arguments to update or create a OrdersItems.
     * @example
     * // Update or create a OrdersItems
     * const ordersItems = await prisma.ordersItems.upsert({
     *   create: {
     *     // ... data to create a OrdersItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrdersItems we want to update
     *   }
     * })
    **/
    upsert<T extends OrdersItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrdersItemsUpsertArgs<ExtArgs>>
    ): Prisma__OrdersItemsClient<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OrdersItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersItemsCountArgs} args - Arguments to filter OrdersItems to count.
     * @example
     * // Count the number of OrdersItems
     * const count = await prisma.ordersItems.count({
     *   where: {
     *     // ... the filter for the OrdersItems we want to count
     *   }
     * })
    **/
    count<T extends OrdersItemsCountArgs>(
      args?: Subset<T, OrdersItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrdersItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersItemsAggregateArgs>(args: Subset<T, OrdersItemsAggregateArgs>): Prisma.PrismaPromise<GetOrdersItemsAggregateType<T>>

    /**
     * Group by OrdersItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersItemsGroupByArgs['orderBy'] }
        : { orderBy?: OrdersItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrdersItems model
   */
  readonly fields: OrdersItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrdersItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrdersItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Order<T extends OrdersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrdersDefaultArgs<ExtArgs>>): Prisma__OrdersClient<$Result.GetResult<Prisma.$OrdersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Item<T extends ItemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemsDefaultArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OrdersItems model
   */ 
  interface OrdersItemsFieldRefs {
    readonly orderItemId: FieldRef<"OrdersItems", 'Int'>
    readonly count: FieldRef<"OrdersItems", 'Int'>
    readonly orderId: FieldRef<"OrdersItems", 'Int'>
    readonly itemId: FieldRef<"OrdersItems", 'Int'>
    readonly createdAt: FieldRef<"OrdersItems", 'DateTime'>
    readonly updatedAt: FieldRef<"OrdersItems", 'DateTime'>
    readonly deletedAt: FieldRef<"OrdersItems", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * OrdersItems findUnique
   */
  export type OrdersItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrdersItems to fetch.
     */
    where: OrdersItemsWhereUniqueInput
  }


  /**
   * OrdersItems findUniqueOrThrow
   */
  export type OrdersItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrdersItems to fetch.
     */
    where: OrdersItemsWhereUniqueInput
  }


  /**
   * OrdersItems findFirst
   */
  export type OrdersItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrdersItems to fetch.
     */
    where?: OrdersItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersItems to fetch.
     */
    orderBy?: OrdersItemsOrderByWithRelationInput | OrdersItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrdersItems.
     */
    cursor?: OrdersItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrdersItems.
     */
    distinct?: OrdersItemsScalarFieldEnum | OrdersItemsScalarFieldEnum[]
  }


  /**
   * OrdersItems findFirstOrThrow
   */
  export type OrdersItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrdersItems to fetch.
     */
    where?: OrdersItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersItems to fetch.
     */
    orderBy?: OrdersItemsOrderByWithRelationInput | OrdersItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrdersItems.
     */
    cursor?: OrdersItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrdersItems.
     */
    distinct?: OrdersItemsScalarFieldEnum | OrdersItemsScalarFieldEnum[]
  }


  /**
   * OrdersItems findMany
   */
  export type OrdersItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * Filter, which OrdersItems to fetch.
     */
    where?: OrdersItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersItems to fetch.
     */
    orderBy?: OrdersItemsOrderByWithRelationInput | OrdersItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrdersItems.
     */
    cursor?: OrdersItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersItems.
     */
    skip?: number
    distinct?: OrdersItemsScalarFieldEnum | OrdersItemsScalarFieldEnum[]
  }


  /**
   * OrdersItems create
   */
  export type OrdersItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a OrdersItems.
     */
    data: XOR<OrdersItemsCreateInput, OrdersItemsUncheckedCreateInput>
  }


  /**
   * OrdersItems createMany
   */
  export type OrdersItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrdersItems.
     */
    data: OrdersItemsCreateManyInput | OrdersItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OrdersItems update
   */
  export type OrdersItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a OrdersItems.
     */
    data: XOR<OrdersItemsUpdateInput, OrdersItemsUncheckedUpdateInput>
    /**
     * Choose, which OrdersItems to update.
     */
    where: OrdersItemsWhereUniqueInput
  }


  /**
   * OrdersItems updateMany
   */
  export type OrdersItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrdersItems.
     */
    data: XOR<OrdersItemsUpdateManyMutationInput, OrdersItemsUncheckedUpdateManyInput>
    /**
     * Filter which OrdersItems to update
     */
    where?: OrdersItemsWhereInput
  }


  /**
   * OrdersItems upsert
   */
  export type OrdersItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the OrdersItems to update in case it exists.
     */
    where: OrdersItemsWhereUniqueInput
    /**
     * In case the OrdersItems found by the `where` argument doesn't exist, create a new OrdersItems with this data.
     */
    create: XOR<OrdersItemsCreateInput, OrdersItemsUncheckedCreateInput>
    /**
     * In case the OrdersItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrdersItemsUpdateInput, OrdersItemsUncheckedUpdateInput>
  }


  /**
   * OrdersItems delete
   */
  export type OrdersItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    /**
     * Filter which OrdersItems to delete.
     */
    where: OrdersItemsWhereUniqueInput
  }


  /**
   * OrdersItems deleteMany
   */
  export type OrdersItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrdersItems to delete
     */
    where?: OrdersItemsWhereInput
  }


  /**
   * OrdersItems without action
   */
  export type OrdersItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
  }



  /**
   * Model Items
   */

  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsAvgAggregateOutputType = {
    itemId: number | null
    prevPrice: number | null
    price: number | null
    count: number | null
    storeId: number | null
  }

  export type ItemsSumAggregateOutputType = {
    itemId: number | null
    prevPrice: number | null
    price: number | null
    count: number | null
    storeId: number | null
  }

  export type ItemsMinAggregateOutputType = {
    itemId: number | null
    name: string | null
    prevPrice: number | null
    price: number | null
    count: number | null
    startTime: Date | null
    endTime: Date | null
    imgUrl: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    storeId: number | null
  }

  export type ItemsMaxAggregateOutputType = {
    itemId: number | null
    name: string | null
    prevPrice: number | null
    price: number | null
    count: number | null
    startTime: Date | null
    endTime: Date | null
    imgUrl: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    storeId: number | null
  }

  export type ItemsCountAggregateOutputType = {
    itemId: number
    name: number
    prevPrice: number
    price: number
    count: number
    startTime: number
    endTime: number
    imgUrl: number
    content: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    storeId: number
    _all: number
  }


  export type ItemsAvgAggregateInputType = {
    itemId?: true
    prevPrice?: true
    price?: true
    count?: true
    storeId?: true
  }

  export type ItemsSumAggregateInputType = {
    itemId?: true
    prevPrice?: true
    price?: true
    count?: true
    storeId?: true
  }

  export type ItemsMinAggregateInputType = {
    itemId?: true
    name?: true
    prevPrice?: true
    price?: true
    count?: true
    startTime?: true
    endTime?: true
    imgUrl?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    storeId?: true
  }

  export type ItemsMaxAggregateInputType = {
    itemId?: true
    name?: true
    prevPrice?: true
    price?: true
    count?: true
    startTime?: true
    endTime?: true
    imgUrl?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    storeId?: true
  }

  export type ItemsCountAggregateInputType = {
    itemId?: true
    name?: true
    prevPrice?: true
    price?: true
    count?: true
    startTime?: true
    endTime?: true
    imgUrl?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    storeId?: true
    _all?: true
  }

  export type ItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to aggregate.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }




  export type ItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithAggregationInput | ItemsOrderByWithAggregationInput[]
    by: ItemsScalarFieldEnum[] | ItemsScalarFieldEnum
    having?: ItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _avg?: ItemsAvgAggregateInputType
    _sum?: ItemsSumAggregateInputType
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }

  export type ItemsGroupByOutputType = {
    itemId: number
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date
    endTime: Date
    imgUrl: string | null
    content: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    storeId: number
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends ItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      >
    >


  export type ItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    itemId?: boolean
    name?: boolean
    prevPrice?: boolean
    price?: boolean
    count?: boolean
    startTime?: boolean
    endTime?: boolean
    imgUrl?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    storeId?: boolean
    Store?: boolean | StoresDefaultArgs<ExtArgs>
    OrdersItems?: boolean | Items$OrdersItemsArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["items"]>

  export type ItemsSelectScalar = {
    itemId?: boolean
    name?: boolean
    prevPrice?: boolean
    price?: boolean
    count?: boolean
    startTime?: boolean
    endTime?: boolean
    imgUrl?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    storeId?: boolean
  }

  export type ItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Store?: boolean | StoresDefaultArgs<ExtArgs>
    OrdersItems?: boolean | Items$OrdersItemsArgs<ExtArgs>
    _count?: boolean | ItemsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Items"
    objects: {
      Store: Prisma.$StoresPayload<ExtArgs>
      OrdersItems: Prisma.$OrdersItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      itemId: number
      name: string
      prevPrice: number
      price: number
      count: number
      startTime: Date
      endTime: Date
      imgUrl: string | null
      content: string
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
      storeId: number
    }, ExtArgs["result"]["items"]>
    composites: {}
  }


  type ItemsGetPayload<S extends boolean | null | undefined | ItemsDefaultArgs> = $Result.GetResult<Prisma.$ItemsPayload, S>

  type ItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ItemsCountAggregateInputType | true
    }

  export interface ItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Items'], meta: { name: 'Items' } }
    /**
     * Find zero or one Items that matches the filter.
     * @param {ItemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Items that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ItemsFindUniqueOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindFirstArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `itemId`
     * const itemsWithItemIdOnly = await prisma.items.findMany({ select: { itemId: true } })
     * 
    **/
    findMany<T extends ItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Items.
     * @param {ItemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
    **/
    create<T extends ItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsCreateArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Items.
     *     @param {ItemsCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const items = await prisma.items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Items.
     * @param {ItemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
    **/
    delete<T extends ItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsDeleteArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Items.
     * @param {ItemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsUpdateArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Items.
     * @param {ItemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
    **/
    upsert<T extends ItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ItemsUpsertArgs<ExtArgs>>
    ): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemsCountArgs>(
      args?: Subset<T, ItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): Prisma.PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsGroupByArgs['orderBy'] }
        : { orderBy?: ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Items model
   */
  readonly fields: ItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Store<T extends StoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoresDefaultArgs<ExtArgs>>): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    OrdersItems<T extends Items$OrdersItemsArgs<ExtArgs> = {}>(args?: Subset<T, Items$OrdersItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrdersItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Items model
   */ 
  interface ItemsFieldRefs {
    readonly itemId: FieldRef<"Items", 'Int'>
    readonly name: FieldRef<"Items", 'String'>
    readonly prevPrice: FieldRef<"Items", 'Int'>
    readonly price: FieldRef<"Items", 'Int'>
    readonly count: FieldRef<"Items", 'Int'>
    readonly startTime: FieldRef<"Items", 'DateTime'>
    readonly endTime: FieldRef<"Items", 'DateTime'>
    readonly imgUrl: FieldRef<"Items", 'String'>
    readonly content: FieldRef<"Items", 'String'>
    readonly createdAt: FieldRef<"Items", 'DateTime'>
    readonly updatedAt: FieldRef<"Items", 'DateTime'>
    readonly deletedAt: FieldRef<"Items", 'DateTime'>
    readonly storeId: FieldRef<"Items", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Items findUnique
   */
  export type ItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items findUniqueOrThrow
   */
  export type ItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items findFirst
   */
  export type ItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Items findFirstOrThrow
   */
  export type ItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Items findMany
   */
  export type ItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }


  /**
   * Items create
   */
  export type ItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a Items.
     */
    data: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
  }


  /**
   * Items createMany
   */
  export type ItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemsCreateManyInput | ItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Items update
   */
  export type ItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a Items.
     */
    data: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
    /**
     * Choose, which Items to update.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items updateMany
   */
  export type ItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemsWhereInput
  }


  /**
   * Items upsert
   */
  export type ItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the Items to update in case it exists.
     */
    where: ItemsWhereUniqueInput
    /**
     * In case the Items found by the `where` argument doesn't exist, create a new Items with this data.
     */
    create: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
    /**
     * In case the Items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
  }


  /**
   * Items delete
   */
  export type ItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
    /**
     * Filter which Items to delete.
     */
    where: ItemsWhereUniqueInput
  }


  /**
   * Items deleteMany
   */
  export type ItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemsWhereInput
  }


  /**
   * Items.OrdersItems
   */
  export type Items$OrdersItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersItems
     */
    select?: OrdersItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersItemsInclude<ExtArgs> | null
    where?: OrdersItemsWhereInput
    orderBy?: OrdersItemsOrderByWithRelationInput | OrdersItemsOrderByWithRelationInput[]
    cursor?: OrdersItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersItemsScalarFieldEnum | OrdersItemsScalarFieldEnum[]
  }


  /**
   * Items without action
   */
  export type ItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ItemsInclude<ExtArgs> | null
  }



  /**
   * Model Alarms
   */

  export type AggregateAlarms = {
    _count: AlarmsCountAggregateOutputType | null
    _avg: AlarmsAvgAggregateOutputType | null
    _sum: AlarmsSumAggregateOutputType | null
    _min: AlarmsMinAggregateOutputType | null
    _max: AlarmsMaxAggregateOutputType | null
  }

  export type AlarmsAvgAggregateOutputType = {
    alarmId: number | null
    storeId: number | null
  }

  export type AlarmsSumAggregateOutputType = {
    alarmId: number | null
    storeId: number | null
  }

  export type AlarmsMinAggregateOutputType = {
    alarmId: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
    storeId: number | null
  }

  export type AlarmsMaxAggregateOutputType = {
    alarmId: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
    storeId: number | null
  }

  export type AlarmsCountAggregateOutputType = {
    alarmId: number
    title: number
    content: number
    createdAt: number
    storeId: number
    _all: number
  }


  export type AlarmsAvgAggregateInputType = {
    alarmId?: true
    storeId?: true
  }

  export type AlarmsSumAggregateInputType = {
    alarmId?: true
    storeId?: true
  }

  export type AlarmsMinAggregateInputType = {
    alarmId?: true
    title?: true
    content?: true
    createdAt?: true
    storeId?: true
  }

  export type AlarmsMaxAggregateInputType = {
    alarmId?: true
    title?: true
    content?: true
    createdAt?: true
    storeId?: true
  }

  export type AlarmsCountAggregateInputType = {
    alarmId?: true
    title?: true
    content?: true
    createdAt?: true
    storeId?: true
    _all?: true
  }

  export type AlarmsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarms to aggregate.
     */
    where?: AlarmsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmsOrderByWithRelationInput | AlarmsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlarmsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alarms
    **/
    _count?: true | AlarmsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlarmsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlarmsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlarmsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlarmsMaxAggregateInputType
  }

  export type GetAlarmsAggregateType<T extends AlarmsAggregateArgs> = {
        [P in keyof T & keyof AggregateAlarms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlarms[P]>
      : GetScalarType<T[P], AggregateAlarms[P]>
  }




  export type AlarmsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmsWhereInput
    orderBy?: AlarmsOrderByWithAggregationInput | AlarmsOrderByWithAggregationInput[]
    by: AlarmsScalarFieldEnum[] | AlarmsScalarFieldEnum
    having?: AlarmsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlarmsCountAggregateInputType | true
    _avg?: AlarmsAvgAggregateInputType
    _sum?: AlarmsSumAggregateInputType
    _min?: AlarmsMinAggregateInputType
    _max?: AlarmsMaxAggregateInputType
  }

  export type AlarmsGroupByOutputType = {
    alarmId: number
    title: string
    content: string
    createdAt: Date
    storeId: number
    _count: AlarmsCountAggregateOutputType | null
    _avg: AlarmsAvgAggregateOutputType | null
    _sum: AlarmsSumAggregateOutputType | null
    _min: AlarmsMinAggregateOutputType | null
    _max: AlarmsMaxAggregateOutputType | null
  }

  type GetAlarmsGroupByPayload<T extends AlarmsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlarmsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlarmsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlarmsGroupByOutputType[P]>
            : GetScalarType<T[P], AlarmsGroupByOutputType[P]>
        }
      >
    >


  export type AlarmsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    alarmId?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    storeId?: boolean
    Store?: boolean | StoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alarms"]>

  export type AlarmsSelectScalar = {
    alarmId?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    storeId?: boolean
  }

  export type AlarmsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Store?: boolean | StoresDefaultArgs<ExtArgs>
  }


  export type $AlarmsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alarms"
    objects: {
      Store: Prisma.$StoresPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      alarmId: number
      title: string
      content: string
      createdAt: Date
      storeId: number
    }, ExtArgs["result"]["alarms"]>
    composites: {}
  }


  type AlarmsGetPayload<S extends boolean | null | undefined | AlarmsDefaultArgs> = $Result.GetResult<Prisma.$AlarmsPayload, S>

  type AlarmsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlarmsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AlarmsCountAggregateInputType | true
    }

  export interface AlarmsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alarms'], meta: { name: 'Alarms' } }
    /**
     * Find zero or one Alarms that matches the filter.
     * @param {AlarmsFindUniqueArgs} args - Arguments to find a Alarms
     * @example
     * // Get one Alarms
     * const alarms = await prisma.alarms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlarmsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlarmsFindUniqueArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Alarms that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlarmsFindUniqueOrThrowArgs} args - Arguments to find a Alarms
     * @example
     * // Get one Alarms
     * const alarms = await prisma.alarms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlarmsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlarmsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Alarms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmsFindFirstArgs} args - Arguments to find a Alarms
     * @example
     * // Get one Alarms
     * const alarms = await prisma.alarms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlarmsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlarmsFindFirstArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Alarms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmsFindFirstOrThrowArgs} args - Arguments to find a Alarms
     * @example
     * // Get one Alarms
     * const alarms = await prisma.alarms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlarmsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlarmsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Alarms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alarms
     * const alarms = await prisma.alarms.findMany()
     * 
     * // Get first 10 Alarms
     * const alarms = await prisma.alarms.findMany({ take: 10 })
     * 
     * // Only select the `alarmId`
     * const alarmsWithAlarmIdOnly = await prisma.alarms.findMany({ select: { alarmId: true } })
     * 
    **/
    findMany<T extends AlarmsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlarmsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Alarms.
     * @param {AlarmsCreateArgs} args - Arguments to create a Alarms.
     * @example
     * // Create one Alarms
     * const Alarms = await prisma.alarms.create({
     *   data: {
     *     // ... data to create a Alarms
     *   }
     * })
     * 
    **/
    create<T extends AlarmsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlarmsCreateArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Alarms.
     *     @param {AlarmsCreateManyArgs} args - Arguments to create many Alarms.
     *     @example
     *     // Create many Alarms
     *     const alarms = await prisma.alarms.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlarmsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlarmsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alarms.
     * @param {AlarmsDeleteArgs} args - Arguments to delete one Alarms.
     * @example
     * // Delete one Alarms
     * const Alarms = await prisma.alarms.delete({
     *   where: {
     *     // ... filter to delete one Alarms
     *   }
     * })
     * 
    **/
    delete<T extends AlarmsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlarmsDeleteArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Alarms.
     * @param {AlarmsUpdateArgs} args - Arguments to update one Alarms.
     * @example
     * // Update one Alarms
     * const alarms = await prisma.alarms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlarmsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlarmsUpdateArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Alarms.
     * @param {AlarmsDeleteManyArgs} args - Arguments to filter Alarms to delete.
     * @example
     * // Delete a few Alarms
     * const { count } = await prisma.alarms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlarmsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlarmsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alarms
     * const alarms = await prisma.alarms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlarmsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlarmsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alarms.
     * @param {AlarmsUpsertArgs} args - Arguments to update or create a Alarms.
     * @example
     * // Update or create a Alarms
     * const alarms = await prisma.alarms.upsert({
     *   create: {
     *     // ... data to create a Alarms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alarms we want to update
     *   }
     * })
    **/
    upsert<T extends AlarmsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlarmsUpsertArgs<ExtArgs>>
    ): Prisma__AlarmsClient<$Result.GetResult<Prisma.$AlarmsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmsCountArgs} args - Arguments to filter Alarms to count.
     * @example
     * // Count the number of Alarms
     * const count = await prisma.alarms.count({
     *   where: {
     *     // ... the filter for the Alarms we want to count
     *   }
     * })
    **/
    count<T extends AlarmsCountArgs>(
      args?: Subset<T, AlarmsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlarmsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlarmsAggregateArgs>(args: Subset<T, AlarmsAggregateArgs>): Prisma.PrismaPromise<GetAlarmsAggregateType<T>>

    /**
     * Group by Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlarmsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlarmsGroupByArgs['orderBy'] }
        : { orderBy?: AlarmsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlarmsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlarmsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alarms model
   */
  readonly fields: AlarmsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alarms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlarmsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Store<T extends StoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoresDefaultArgs<ExtArgs>>): Prisma__StoresClient<$Result.GetResult<Prisma.$StoresPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Alarms model
   */ 
  interface AlarmsFieldRefs {
    readonly alarmId: FieldRef<"Alarms", 'Int'>
    readonly title: FieldRef<"Alarms", 'String'>
    readonly content: FieldRef<"Alarms", 'String'>
    readonly createdAt: FieldRef<"Alarms", 'DateTime'>
    readonly storeId: FieldRef<"Alarms", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Alarms findUnique
   */
  export type AlarmsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where: AlarmsWhereUniqueInput
  }


  /**
   * Alarms findUniqueOrThrow
   */
  export type AlarmsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where: AlarmsWhereUniqueInput
  }


  /**
   * Alarms findFirst
   */
  export type AlarmsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where?: AlarmsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmsOrderByWithRelationInput | AlarmsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmsScalarFieldEnum | AlarmsScalarFieldEnum[]
  }


  /**
   * Alarms findFirstOrThrow
   */
  export type AlarmsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where?: AlarmsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmsOrderByWithRelationInput | AlarmsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmsScalarFieldEnum | AlarmsScalarFieldEnum[]
  }


  /**
   * Alarms findMany
   */
  export type AlarmsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where?: AlarmsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmsOrderByWithRelationInput | AlarmsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alarms.
     */
    cursor?: AlarmsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    distinct?: AlarmsScalarFieldEnum | AlarmsScalarFieldEnum[]
  }


  /**
   * Alarms create
   */
  export type AlarmsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * The data needed to create a Alarms.
     */
    data: XOR<AlarmsCreateInput, AlarmsUncheckedCreateInput>
  }


  /**
   * Alarms createMany
   */
  export type AlarmsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alarms.
     */
    data: AlarmsCreateManyInput | AlarmsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Alarms update
   */
  export type AlarmsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * The data needed to update a Alarms.
     */
    data: XOR<AlarmsUpdateInput, AlarmsUncheckedUpdateInput>
    /**
     * Choose, which Alarms to update.
     */
    where: AlarmsWhereUniqueInput
  }


  /**
   * Alarms updateMany
   */
  export type AlarmsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alarms.
     */
    data: XOR<AlarmsUpdateManyMutationInput, AlarmsUncheckedUpdateManyInput>
    /**
     * Filter which Alarms to update
     */
    where?: AlarmsWhereInput
  }


  /**
   * Alarms upsert
   */
  export type AlarmsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * The filter to search for the Alarms to update in case it exists.
     */
    where: AlarmsWhereUniqueInput
    /**
     * In case the Alarms found by the `where` argument doesn't exist, create a new Alarms with this data.
     */
    create: XOR<AlarmsCreateInput, AlarmsUncheckedCreateInput>
    /**
     * In case the Alarms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlarmsUpdateInput, AlarmsUncheckedUpdateInput>
  }


  /**
   * Alarms delete
   */
  export type AlarmsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
    /**
     * Filter which Alarms to delete.
     */
    where: AlarmsWhereUniqueInput
  }


  /**
   * Alarms deleteMany
   */
  export type AlarmsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarms to delete
     */
    where?: AlarmsWhereInput
  }


  /**
   * Alarms without action
   */
  export type AlarmsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarms
     */
    select?: AlarmsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlarmsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    userId: 'userId',
    isClient: 'isClient',
    email: 'email',
    password: 'password',
    name: 'name',
    point: 'point',
    nickname: 'nickname',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const StoresScalarFieldEnum: {
    storeId: 'storeId',
    name: 'name',
    longitude: 'longitude',
    latitude: 'latitude',
    address: 'address',
    storePhoneNumber: 'storePhoneNumber',
    category: 'category',
    managementNumber: 'managementNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    ownerId: 'ownerId'
  };

  export type StoresScalarFieldEnum = (typeof StoresScalarFieldEnum)[keyof typeof StoresScalarFieldEnum]


  export const LikesScalarFieldEnum: {
    likeId: 'likeId',
    createdAt: 'createdAt',
    userId: 'userId',
    storeId: 'storeId'
  };

  export type LikesScalarFieldEnum = (typeof LikesScalarFieldEnum)[keyof typeof LikesScalarFieldEnum]


  export const ReviewsScalarFieldEnum: {
    reviewId: 'reviewId',
    content: 'content',
    star: 'star',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    storeId: 'storeId',
    userId: 'userId',
    orderId: 'orderId'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    orderId: 'orderId',
    discount: 'discount',
    totalPrice: 'totalPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    ordered: 'ordered',
    userId: 'userId',
    storeId: 'storeId'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const OrdersItemsScalarFieldEnum: {
    orderItemId: 'orderItemId',
    count: 'count',
    orderId: 'orderId',
    itemId: 'itemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type OrdersItemsScalarFieldEnum = (typeof OrdersItemsScalarFieldEnum)[keyof typeof OrdersItemsScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    itemId: 'itemId',
    name: 'name',
    prevPrice: 'prevPrice',
    price: 'price',
    count: 'count',
    startTime: 'startTime',
    endTime: 'endTime',
    imgUrl: 'imgUrl',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    storeId: 'storeId'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const AlarmsScalarFieldEnum: {
    alarmId: 'alarmId',
    title: 'title',
    content: 'content',
    createdAt: 'createdAt',
    storeId: 'storeId'
  };

  export type AlarmsScalarFieldEnum = (typeof AlarmsScalarFieldEnum)[keyof typeof AlarmsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    userId?: IntFilter<"Users"> | number
    isClient?: BoolFilter<"Users"> | boolean
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    name?: StringFilter<"Users"> | string
    point?: IntFilter<"Users"> | number
    nickname?: StringFilter<"Users"> | string
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Users"> | Date | string | null
    Likes?: LikesListRelationFilter
    Orders?: OrdersListRelationFilter
    Reviews?: ReviewsListRelationFilter
    Store?: XOR<StoresNullableRelationFilter, StoresWhereInput> | null
  }

  export type UsersOrderByWithRelationInput = {
    userId?: SortOrder
    isClient?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    point?: SortOrder
    nickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    Likes?: LikesOrderByRelationAggregateInput
    Orders?: OrdersOrderByRelationAggregateInput
    Reviews?: ReviewsOrderByRelationAggregateInput
    Store?: StoresOrderByWithRelationInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    email?: string
    nickname?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    isClient?: BoolFilter<"Users"> | boolean
    password?: StringFilter<"Users"> | string
    name?: StringFilter<"Users"> | string
    point?: IntFilter<"Users"> | number
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Users"> | Date | string | null
    Likes?: LikesListRelationFilter
    Orders?: OrdersListRelationFilter
    Reviews?: ReviewsListRelationFilter
    Store?: XOR<StoresNullableRelationFilter, StoresWhereInput> | null
  }, "userId" | "email" | "nickname">

  export type UsersOrderByWithAggregationInput = {
    userId?: SortOrder
    isClient?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    point?: SortOrder
    nickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Users"> | number
    isClient?: BoolWithAggregatesFilter<"Users"> | boolean
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    name?: StringWithAggregatesFilter<"Users"> | string
    point?: IntWithAggregatesFilter<"Users"> | number
    nickname?: StringWithAggregatesFilter<"Users"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
  }

  export type StoresWhereInput = {
    AND?: StoresWhereInput | StoresWhereInput[]
    OR?: StoresWhereInput[]
    NOT?: StoresWhereInput | StoresWhereInput[]
    storeId?: IntFilter<"Stores"> | number
    name?: StringFilter<"Stores"> | string
    longitude?: FloatFilter<"Stores"> | number
    latitude?: FloatFilter<"Stores"> | number
    address?: StringFilter<"Stores"> | string
    storePhoneNumber?: StringNullableFilter<"Stores"> | string | null
    category?: StringFilter<"Stores"> | string
    managementNumber?: StringFilter<"Stores"> | string
    createdAt?: DateTimeFilter<"Stores"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Stores"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Stores"> | Date | string | null
    ownerId?: IntNullableFilter<"Stores"> | number | null
    Owner?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
    Likes?: LikesListRelationFilter
    Items?: ItemsListRelationFilter
    Reviews?: ReviewsListRelationFilter
    Alarms?: AlarmsListRelationFilter
    Orders?: OrdersListRelationFilter
  }

  export type StoresOrderByWithRelationInput = {
    storeId?: SortOrder
    name?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    storePhoneNumber?: SortOrderInput | SortOrder
    category?: SortOrder
    managementNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    Owner?: UsersOrderByWithRelationInput
    Likes?: LikesOrderByRelationAggregateInput
    Items?: ItemsOrderByRelationAggregateInput
    Reviews?: ReviewsOrderByRelationAggregateInput
    Alarms?: AlarmsOrderByRelationAggregateInput
    Orders?: OrdersOrderByRelationAggregateInput
  }

  export type StoresWhereUniqueInput = Prisma.AtLeast<{
    storeId?: number
    managementNumber?: string
    ownerId?: number
    AND?: StoresWhereInput | StoresWhereInput[]
    OR?: StoresWhereInput[]
    NOT?: StoresWhereInput | StoresWhereInput[]
    name?: StringFilter<"Stores"> | string
    longitude?: FloatFilter<"Stores"> | number
    latitude?: FloatFilter<"Stores"> | number
    address?: StringFilter<"Stores"> | string
    storePhoneNumber?: StringNullableFilter<"Stores"> | string | null
    category?: StringFilter<"Stores"> | string
    createdAt?: DateTimeFilter<"Stores"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Stores"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Stores"> | Date | string | null
    Owner?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
    Likes?: LikesListRelationFilter
    Items?: ItemsListRelationFilter
    Reviews?: ReviewsListRelationFilter
    Alarms?: AlarmsListRelationFilter
    Orders?: OrdersListRelationFilter
  }, "storeId" | "managementNumber" | "ownerId">

  export type StoresOrderByWithAggregationInput = {
    storeId?: SortOrder
    name?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    storePhoneNumber?: SortOrderInput | SortOrder
    category?: SortOrder
    managementNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    _count?: StoresCountOrderByAggregateInput
    _avg?: StoresAvgOrderByAggregateInput
    _max?: StoresMaxOrderByAggregateInput
    _min?: StoresMinOrderByAggregateInput
    _sum?: StoresSumOrderByAggregateInput
  }

  export type StoresScalarWhereWithAggregatesInput = {
    AND?: StoresScalarWhereWithAggregatesInput | StoresScalarWhereWithAggregatesInput[]
    OR?: StoresScalarWhereWithAggregatesInput[]
    NOT?: StoresScalarWhereWithAggregatesInput | StoresScalarWhereWithAggregatesInput[]
    storeId?: IntWithAggregatesFilter<"Stores"> | number
    name?: StringWithAggregatesFilter<"Stores"> | string
    longitude?: FloatWithAggregatesFilter<"Stores"> | number
    latitude?: FloatWithAggregatesFilter<"Stores"> | number
    address?: StringWithAggregatesFilter<"Stores"> | string
    storePhoneNumber?: StringNullableWithAggregatesFilter<"Stores"> | string | null
    category?: StringWithAggregatesFilter<"Stores"> | string
    managementNumber?: StringWithAggregatesFilter<"Stores"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Stores"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Stores"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Stores"> | Date | string | null
    ownerId?: IntNullableWithAggregatesFilter<"Stores"> | number | null
  }

  export type LikesWhereInput = {
    AND?: LikesWhereInput | LikesWhereInput[]
    OR?: LikesWhereInput[]
    NOT?: LikesWhereInput | LikesWhereInput[]
    likeId?: IntFilter<"Likes"> | number
    createdAt?: DateTimeFilter<"Likes"> | Date | string
    userId?: IntFilter<"Likes"> | number
    storeId?: IntFilter<"Likes"> | number
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
  }

  export type LikesOrderByWithRelationInput = {
    likeId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
    User?: UsersOrderByWithRelationInput
    Store?: StoresOrderByWithRelationInput
  }

  export type LikesWhereUniqueInput = Prisma.AtLeast<{
    likeId?: number
    AND?: LikesWhereInput | LikesWhereInput[]
    OR?: LikesWhereInput[]
    NOT?: LikesWhereInput | LikesWhereInput[]
    createdAt?: DateTimeFilter<"Likes"> | Date | string
    userId?: IntFilter<"Likes"> | number
    storeId?: IntFilter<"Likes"> | number
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
  }, "likeId">

  export type LikesOrderByWithAggregationInput = {
    likeId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
    _count?: LikesCountOrderByAggregateInput
    _avg?: LikesAvgOrderByAggregateInput
    _max?: LikesMaxOrderByAggregateInput
    _min?: LikesMinOrderByAggregateInput
    _sum?: LikesSumOrderByAggregateInput
  }

  export type LikesScalarWhereWithAggregatesInput = {
    AND?: LikesScalarWhereWithAggregatesInput | LikesScalarWhereWithAggregatesInput[]
    OR?: LikesScalarWhereWithAggregatesInput[]
    NOT?: LikesScalarWhereWithAggregatesInput | LikesScalarWhereWithAggregatesInput[]
    likeId?: IntWithAggregatesFilter<"Likes"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Likes"> | Date | string
    userId?: IntWithAggregatesFilter<"Likes"> | number
    storeId?: IntWithAggregatesFilter<"Likes"> | number
  }

  export type ReviewsWhereInput = {
    AND?: ReviewsWhereInput | ReviewsWhereInput[]
    OR?: ReviewsWhereInput[]
    NOT?: ReviewsWhereInput | ReviewsWhereInput[]
    reviewId?: IntFilter<"Reviews"> | number
    content?: StringFilter<"Reviews"> | string
    star?: IntFilter<"Reviews"> | number
    createdAt?: DateTimeFilter<"Reviews"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Reviews"> | Date | string | null
    storeId?: IntFilter<"Reviews"> | number
    userId?: IntFilter<"Reviews"> | number
    orderId?: IntFilter<"Reviews"> | number
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Order?: XOR<OrdersRelationFilter, OrdersWhereInput>
  }

  export type ReviewsOrderByWithRelationInput = {
    reviewId?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    storeId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    Store?: StoresOrderByWithRelationInput
    User?: UsersOrderByWithRelationInput
    Order?: OrdersOrderByWithRelationInput
  }

  export type ReviewsWhereUniqueInput = Prisma.AtLeast<{
    reviewId?: number
    orderId?: number
    AND?: ReviewsWhereInput | ReviewsWhereInput[]
    OR?: ReviewsWhereInput[]
    NOT?: ReviewsWhereInput | ReviewsWhereInput[]
    content?: StringFilter<"Reviews"> | string
    star?: IntFilter<"Reviews"> | number
    createdAt?: DateTimeFilter<"Reviews"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Reviews"> | Date | string | null
    storeId?: IntFilter<"Reviews"> | number
    userId?: IntFilter<"Reviews"> | number
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Order?: XOR<OrdersRelationFilter, OrdersWhereInput>
  }, "reviewId" | "orderId">

  export type ReviewsOrderByWithAggregationInput = {
    reviewId?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    storeId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    _count?: ReviewsCountOrderByAggregateInput
    _avg?: ReviewsAvgOrderByAggregateInput
    _max?: ReviewsMaxOrderByAggregateInput
    _min?: ReviewsMinOrderByAggregateInput
    _sum?: ReviewsSumOrderByAggregateInput
  }

  export type ReviewsScalarWhereWithAggregatesInput = {
    AND?: ReviewsScalarWhereWithAggregatesInput | ReviewsScalarWhereWithAggregatesInput[]
    OR?: ReviewsScalarWhereWithAggregatesInput[]
    NOT?: ReviewsScalarWhereWithAggregatesInput | ReviewsScalarWhereWithAggregatesInput[]
    reviewId?: IntWithAggregatesFilter<"Reviews"> | number
    content?: StringWithAggregatesFilter<"Reviews"> | string
    star?: IntWithAggregatesFilter<"Reviews"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Reviews"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Reviews"> | Date | string | null
    storeId?: IntWithAggregatesFilter<"Reviews"> | number
    userId?: IntWithAggregatesFilter<"Reviews"> | number
    orderId?: IntWithAggregatesFilter<"Reviews"> | number
  }

  export type OrdersWhereInput = {
    AND?: OrdersWhereInput | OrdersWhereInput[]
    OR?: OrdersWhereInput[]
    NOT?: OrdersWhereInput | OrdersWhereInput[]
    orderId?: IntFilter<"Orders"> | number
    discount?: IntFilter<"Orders"> | number
    totalPrice?: IntFilter<"Orders"> | number
    createdAt?: DateTimeFilter<"Orders"> | Date | string
    updatedAt?: DateTimeFilter<"Orders"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Orders"> | Date | string | null
    ordered?: BoolFilter<"Orders"> | boolean
    userId?: IntFilter<"Orders"> | number
    storeId?: IntFilter<"Orders"> | number
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
    Review?: XOR<ReviewsNullableRelationFilter, ReviewsWhereInput> | null
    OrdersItems?: OrdersItemsListRelationFilter
  }

  export type OrdersOrderByWithRelationInput = {
    orderId?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    ordered?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
    User?: UsersOrderByWithRelationInput
    Store?: StoresOrderByWithRelationInput
    Review?: ReviewsOrderByWithRelationInput
    OrdersItems?: OrdersItemsOrderByRelationAggregateInput
  }

  export type OrdersWhereUniqueInput = Prisma.AtLeast<{
    orderId?: number
    AND?: OrdersWhereInput | OrdersWhereInput[]
    OR?: OrdersWhereInput[]
    NOT?: OrdersWhereInput | OrdersWhereInput[]
    discount?: IntFilter<"Orders"> | number
    totalPrice?: IntFilter<"Orders"> | number
    createdAt?: DateTimeFilter<"Orders"> | Date | string
    updatedAt?: DateTimeFilter<"Orders"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Orders"> | Date | string | null
    ordered?: BoolFilter<"Orders"> | boolean
    userId?: IntFilter<"Orders"> | number
    storeId?: IntFilter<"Orders"> | number
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
    Review?: XOR<ReviewsNullableRelationFilter, ReviewsWhereInput> | null
    OrdersItems?: OrdersItemsListRelationFilter
  }, "orderId">

  export type OrdersOrderByWithAggregationInput = {
    orderId?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    ordered?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
    _count?: OrdersCountOrderByAggregateInput
    _avg?: OrdersAvgOrderByAggregateInput
    _max?: OrdersMaxOrderByAggregateInput
    _min?: OrdersMinOrderByAggregateInput
    _sum?: OrdersSumOrderByAggregateInput
  }

  export type OrdersScalarWhereWithAggregatesInput = {
    AND?: OrdersScalarWhereWithAggregatesInput | OrdersScalarWhereWithAggregatesInput[]
    OR?: OrdersScalarWhereWithAggregatesInput[]
    NOT?: OrdersScalarWhereWithAggregatesInput | OrdersScalarWhereWithAggregatesInput[]
    orderId?: IntWithAggregatesFilter<"Orders"> | number
    discount?: IntWithAggregatesFilter<"Orders"> | number
    totalPrice?: IntWithAggregatesFilter<"Orders"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Orders"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Orders"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Orders"> | Date | string | null
    ordered?: BoolWithAggregatesFilter<"Orders"> | boolean
    userId?: IntWithAggregatesFilter<"Orders"> | number
    storeId?: IntWithAggregatesFilter<"Orders"> | number
  }

  export type OrdersItemsWhereInput = {
    AND?: OrdersItemsWhereInput | OrdersItemsWhereInput[]
    OR?: OrdersItemsWhereInput[]
    NOT?: OrdersItemsWhereInput | OrdersItemsWhereInput[]
    orderItemId?: IntFilter<"OrdersItems"> | number
    count?: IntFilter<"OrdersItems"> | number
    orderId?: IntFilter<"OrdersItems"> | number
    itemId?: IntFilter<"OrdersItems"> | number
    createdAt?: DateTimeFilter<"OrdersItems"> | Date | string
    updatedAt?: DateTimeFilter<"OrdersItems"> | Date | string
    deletedAt?: DateTimeNullableFilter<"OrdersItems"> | Date | string | null
    Order?: XOR<OrdersRelationFilter, OrdersWhereInput>
    Item?: XOR<ItemsRelationFilter, ItemsWhereInput>
  }

  export type OrdersItemsOrderByWithRelationInput = {
    orderItemId?: SortOrder
    count?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    Order?: OrdersOrderByWithRelationInput
    Item?: ItemsOrderByWithRelationInput
  }

  export type OrdersItemsWhereUniqueInput = Prisma.AtLeast<{
    orderItemId?: number
    AND?: OrdersItemsWhereInput | OrdersItemsWhereInput[]
    OR?: OrdersItemsWhereInput[]
    NOT?: OrdersItemsWhereInput | OrdersItemsWhereInput[]
    count?: IntFilter<"OrdersItems"> | number
    orderId?: IntFilter<"OrdersItems"> | number
    itemId?: IntFilter<"OrdersItems"> | number
    createdAt?: DateTimeFilter<"OrdersItems"> | Date | string
    updatedAt?: DateTimeFilter<"OrdersItems"> | Date | string
    deletedAt?: DateTimeNullableFilter<"OrdersItems"> | Date | string | null
    Order?: XOR<OrdersRelationFilter, OrdersWhereInput>
    Item?: XOR<ItemsRelationFilter, ItemsWhereInput>
  }, "orderItemId">

  export type OrdersItemsOrderByWithAggregationInput = {
    orderItemId?: SortOrder
    count?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: OrdersItemsCountOrderByAggregateInput
    _avg?: OrdersItemsAvgOrderByAggregateInput
    _max?: OrdersItemsMaxOrderByAggregateInput
    _min?: OrdersItemsMinOrderByAggregateInput
    _sum?: OrdersItemsSumOrderByAggregateInput
  }

  export type OrdersItemsScalarWhereWithAggregatesInput = {
    AND?: OrdersItemsScalarWhereWithAggregatesInput | OrdersItemsScalarWhereWithAggregatesInput[]
    OR?: OrdersItemsScalarWhereWithAggregatesInput[]
    NOT?: OrdersItemsScalarWhereWithAggregatesInput | OrdersItemsScalarWhereWithAggregatesInput[]
    orderItemId?: IntWithAggregatesFilter<"OrdersItems"> | number
    count?: IntWithAggregatesFilter<"OrdersItems"> | number
    orderId?: IntWithAggregatesFilter<"OrdersItems"> | number
    itemId?: IntWithAggregatesFilter<"OrdersItems"> | number
    createdAt?: DateTimeWithAggregatesFilter<"OrdersItems"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OrdersItems"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"OrdersItems"> | Date | string | null
  }

  export type ItemsWhereInput = {
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    itemId?: IntFilter<"Items"> | number
    name?: StringFilter<"Items"> | string
    prevPrice?: IntFilter<"Items"> | number
    price?: IntFilter<"Items"> | number
    count?: IntFilter<"Items"> | number
    startTime?: DateTimeFilter<"Items"> | Date | string
    endTime?: DateTimeFilter<"Items"> | Date | string
    imgUrl?: StringNullableFilter<"Items"> | string | null
    content?: StringFilter<"Items"> | string
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Items"> | Date | string | null
    storeId?: IntFilter<"Items"> | number
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
    OrdersItems?: OrdersItemsListRelationFilter
  }

  export type ItemsOrderByWithRelationInput = {
    itemId?: SortOrder
    name?: SortOrder
    prevPrice?: SortOrder
    price?: SortOrder
    count?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    imgUrl?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    storeId?: SortOrder
    Store?: StoresOrderByWithRelationInput
    OrdersItems?: OrdersItemsOrderByRelationAggregateInput
  }

  export type ItemsWhereUniqueInput = Prisma.AtLeast<{
    itemId?: number
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    name?: StringFilter<"Items"> | string
    prevPrice?: IntFilter<"Items"> | number
    price?: IntFilter<"Items"> | number
    count?: IntFilter<"Items"> | number
    startTime?: DateTimeFilter<"Items"> | Date | string
    endTime?: DateTimeFilter<"Items"> | Date | string
    imgUrl?: StringNullableFilter<"Items"> | string | null
    content?: StringFilter<"Items"> | string
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Items"> | Date | string | null
    storeId?: IntFilter<"Items"> | number
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
    OrdersItems?: OrdersItemsListRelationFilter
  }, "itemId">

  export type ItemsOrderByWithAggregationInput = {
    itemId?: SortOrder
    name?: SortOrder
    prevPrice?: SortOrder
    price?: SortOrder
    count?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    imgUrl?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    storeId?: SortOrder
    _count?: ItemsCountOrderByAggregateInput
    _avg?: ItemsAvgOrderByAggregateInput
    _max?: ItemsMaxOrderByAggregateInput
    _min?: ItemsMinOrderByAggregateInput
    _sum?: ItemsSumOrderByAggregateInput
  }

  export type ItemsScalarWhereWithAggregatesInput = {
    AND?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    OR?: ItemsScalarWhereWithAggregatesInput[]
    NOT?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    itemId?: IntWithAggregatesFilter<"Items"> | number
    name?: StringWithAggregatesFilter<"Items"> | string
    prevPrice?: IntWithAggregatesFilter<"Items"> | number
    price?: IntWithAggregatesFilter<"Items"> | number
    count?: IntWithAggregatesFilter<"Items"> | number
    startTime?: DateTimeWithAggregatesFilter<"Items"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Items"> | Date | string
    imgUrl?: StringNullableWithAggregatesFilter<"Items"> | string | null
    content?: StringWithAggregatesFilter<"Items"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Items"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Items"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Items"> | Date | string | null
    storeId?: IntWithAggregatesFilter<"Items"> | number
  }

  export type AlarmsWhereInput = {
    AND?: AlarmsWhereInput | AlarmsWhereInput[]
    OR?: AlarmsWhereInput[]
    NOT?: AlarmsWhereInput | AlarmsWhereInput[]
    alarmId?: IntFilter<"Alarms"> | number
    title?: StringFilter<"Alarms"> | string
    content?: StringFilter<"Alarms"> | string
    createdAt?: DateTimeFilter<"Alarms"> | Date | string
    storeId?: IntFilter<"Alarms"> | number
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
  }

  export type AlarmsOrderByWithRelationInput = {
    alarmId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    storeId?: SortOrder
    Store?: StoresOrderByWithRelationInput
  }

  export type AlarmsWhereUniqueInput = Prisma.AtLeast<{
    alarmId?: number
    AND?: AlarmsWhereInput | AlarmsWhereInput[]
    OR?: AlarmsWhereInput[]
    NOT?: AlarmsWhereInput | AlarmsWhereInput[]
    title?: StringFilter<"Alarms"> | string
    content?: StringFilter<"Alarms"> | string
    createdAt?: DateTimeFilter<"Alarms"> | Date | string
    storeId?: IntFilter<"Alarms"> | number
    Store?: XOR<StoresRelationFilter, StoresWhereInput>
  }, "alarmId">

  export type AlarmsOrderByWithAggregationInput = {
    alarmId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    storeId?: SortOrder
    _count?: AlarmsCountOrderByAggregateInput
    _avg?: AlarmsAvgOrderByAggregateInput
    _max?: AlarmsMaxOrderByAggregateInput
    _min?: AlarmsMinOrderByAggregateInput
    _sum?: AlarmsSumOrderByAggregateInput
  }

  export type AlarmsScalarWhereWithAggregatesInput = {
    AND?: AlarmsScalarWhereWithAggregatesInput | AlarmsScalarWhereWithAggregatesInput[]
    OR?: AlarmsScalarWhereWithAggregatesInput[]
    NOT?: AlarmsScalarWhereWithAggregatesInput | AlarmsScalarWhereWithAggregatesInput[]
    alarmId?: IntWithAggregatesFilter<"Alarms"> | number
    title?: StringWithAggregatesFilter<"Alarms"> | string
    content?: StringWithAggregatesFilter<"Alarms"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Alarms"> | Date | string
    storeId?: IntWithAggregatesFilter<"Alarms"> | number
  }

  export type UsersCreateInput = {
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesCreateNestedManyWithoutUserInput
    Orders?: OrdersCreateNestedManyWithoutUserInput
    Reviews?: ReviewsCreateNestedManyWithoutUserInput
    Store?: StoresCreateNestedOneWithoutOwnerInput
  }

  export type UsersUncheckedCreateInput = {
    userId?: number
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutUserInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutUserInput
    Store?: StoresUncheckedCreateNestedOneWithoutOwnerInput
  }

  export type UsersUpdateInput = {
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUpdateManyWithoutUserNestedInput
    Orders?: OrdersUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUpdateManyWithoutUserNestedInput
    Store?: StoresUpdateOneWithoutOwnerNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutUserNestedInput
    Store?: StoresUncheckedUpdateOneWithoutOwnerNestedInput
  }

  export type UsersCreateManyInput = {
    userId?: number
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UsersUpdateManyMutationInput = {
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StoresCreateInput = {
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Owner?: UsersCreateNestedOneWithoutStoreInput
    Likes?: LikesCreateNestedManyWithoutStoreInput
    Items?: ItemsCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsCreateNestedManyWithoutStoreInput
    Orders?: OrdersCreateNestedManyWithoutStoreInput
  }

  export type StoresUncheckedCreateInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    ownerId?: number | null
    Likes?: LikesUncheckedCreateNestedManyWithoutStoreInput
    Items?: ItemsUncheckedCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsUncheckedCreateNestedManyWithoutStoreInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoresUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UsersUpdateOneWithoutStoreNestedInput
    Likes?: LikesUpdateManyWithoutStoreNestedInput
    Items?: ItemsUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUpdateManyWithoutStoreNestedInput
  }

  export type StoresUncheckedUpdateInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    Likes?: LikesUncheckedUpdateManyWithoutStoreNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUncheckedUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoresCreateManyInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    ownerId?: number | null
  }

  export type StoresUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StoresUncheckedUpdateManyInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LikesCreateInput = {
    createdAt?: Date | string
    User: UsersCreateNestedOneWithoutLikesInput
    Store: StoresCreateNestedOneWithoutLikesInput
  }

  export type LikesUncheckedCreateInput = {
    likeId?: number
    createdAt?: Date | string
    userId: number
    storeId: number
  }

  export type LikesUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutLikesNestedInput
    Store?: StoresUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikesUncheckedUpdateInput = {
    likeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type LikesCreateManyInput = {
    likeId?: number
    createdAt?: Date | string
    userId: number
    storeId: number
  }

  export type LikesUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikesUncheckedUpdateManyInput = {
    likeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsCreateInput = {
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    Store: StoresCreateNestedOneWithoutReviewsInput
    User: UsersCreateNestedOneWithoutReviewsInput
    Order: OrdersCreateNestedOneWithoutReviewInput
  }

  export type ReviewsUncheckedCreateInput = {
    reviewId?: number
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
    userId: number
    orderId: number
  }

  export type ReviewsUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Store?: StoresUpdateOneRequiredWithoutReviewsNestedInput
    User?: UsersUpdateOneRequiredWithoutReviewsNestedInput
    Order?: OrdersUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewsUncheckedUpdateInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsCreateManyInput = {
    reviewId?: number
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
    userId: number
    orderId: number
  }

  export type ReviewsUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewsUncheckedUpdateManyInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type OrdersCreateInput = {
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    User: UsersCreateNestedOneWithoutOrdersInput
    Store: StoresCreateNestedOneWithoutOrdersInput
    Review?: ReviewsCreateNestedOneWithoutOrderInput
    OrdersItems?: OrdersItemsCreateNestedManyWithoutOrderInput
  }

  export type OrdersUncheckedCreateInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    userId: number
    storeId: number
    Review?: ReviewsUncheckedCreateNestedOneWithoutOrderInput
    OrdersItems?: OrdersItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrdersUpdateInput = {
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    User?: UsersUpdateOneRequiredWithoutOrdersNestedInput
    Store?: StoresUpdateOneRequiredWithoutOrdersNestedInput
    Review?: ReviewsUpdateOneWithoutOrderNestedInput
    OrdersItems?: OrdersItemsUpdateManyWithoutOrderNestedInput
  }

  export type OrdersUncheckedUpdateInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    storeId?: IntFieldUpdateOperationsInput | number
    Review?: ReviewsUncheckedUpdateOneWithoutOrderNestedInput
    OrdersItems?: OrdersItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrdersCreateManyInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    userId: number
    storeId: number
  }

  export type OrdersUpdateManyMutationInput = {
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrdersUncheckedUpdateManyInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type OrdersItemsCreateInput = {
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Order: OrdersCreateNestedOneWithoutOrdersItemsInput
    Item: ItemsCreateNestedOneWithoutOrdersItemsInput
  }

  export type OrdersItemsUncheckedCreateInput = {
    orderItemId?: number
    count: number
    orderId: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type OrdersItemsUpdateInput = {
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Order?: OrdersUpdateOneRequiredWithoutOrdersItemsNestedInput
    Item?: ItemsUpdateOneRequiredWithoutOrdersItemsNestedInput
  }

  export type OrdersItemsUncheckedUpdateInput = {
    orderItemId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdersItemsCreateManyInput = {
    orderItemId?: number
    count: number
    orderId: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type OrdersItemsUpdateManyMutationInput = {
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdersItemsUncheckedUpdateManyInput = {
    orderItemId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ItemsCreateInput = {
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Store: StoresCreateNestedOneWithoutItemsInput
    OrdersItems?: OrdersItemsCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateInput = {
    itemId?: number
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
    OrdersItems?: OrdersItemsUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Store?: StoresUpdateOneRequiredWithoutItemsNestedInput
    OrdersItems?: OrdersItemsUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateInput = {
    itemId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
    OrdersItems?: OrdersItemsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemsCreateManyInput = {
    itemId?: number
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
  }

  export type ItemsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ItemsUncheckedUpdateManyInput = {
    itemId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type AlarmsCreateInput = {
    title: string
    content: string
    createdAt?: Date | string
    Store: StoresCreateNestedOneWithoutAlarmsInput
  }

  export type AlarmsUncheckedCreateInput = {
    alarmId?: number
    title: string
    content: string
    createdAt?: Date | string
    storeId: number
  }

  export type AlarmsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Store?: StoresUpdateOneRequiredWithoutAlarmsNestedInput
  }

  export type AlarmsUncheckedUpdateInput = {
    alarmId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type AlarmsCreateManyInput = {
    alarmId?: number
    title: string
    content: string
    createdAt?: Date | string
    storeId: number
  }

  export type AlarmsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmsUncheckedUpdateManyInput = {
    alarmId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type LikesListRelationFilter = {
    every?: LikesWhereInput
    some?: LikesWhereInput
    none?: LikesWhereInput
  }

  export type OrdersListRelationFilter = {
    every?: OrdersWhereInput
    some?: OrdersWhereInput
    none?: OrdersWhereInput
  }

  export type ReviewsListRelationFilter = {
    every?: ReviewsWhereInput
    some?: ReviewsWhereInput
    none?: ReviewsWhereInput
  }

  export type StoresNullableRelationFilter = {
    is?: StoresWhereInput | null
    isNot?: StoresWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LikesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrdersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    userId?: SortOrder
    isClient?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    point?: SortOrder
    nickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    userId?: SortOrder
    point?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    userId?: SortOrder
    isClient?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    point?: SortOrder
    nickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    userId?: SortOrder
    isClient?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    point?: SortOrder
    nickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    userId?: SortOrder
    point?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type ItemsListRelationFilter = {
    every?: ItemsWhereInput
    some?: ItemsWhereInput
    none?: ItemsWhereInput
  }

  export type AlarmsListRelationFilter = {
    every?: AlarmsWhereInput
    some?: AlarmsWhereInput
    none?: AlarmsWhereInput
  }

  export type ItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlarmsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoresCountOrderByAggregateInput = {
    storeId?: SortOrder
    name?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    storePhoneNumber?: SortOrder
    category?: SortOrder
    managementNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type StoresAvgOrderByAggregateInput = {
    storeId?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    ownerId?: SortOrder
  }

  export type StoresMaxOrderByAggregateInput = {
    storeId?: SortOrder
    name?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    storePhoneNumber?: SortOrder
    category?: SortOrder
    managementNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type StoresMinOrderByAggregateInput = {
    storeId?: SortOrder
    name?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    address?: SortOrder
    storePhoneNumber?: SortOrder
    category?: SortOrder
    managementNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type StoresSumOrderByAggregateInput = {
    storeId?: SortOrder
    longitude?: SortOrder
    latitude?: SortOrder
    ownerId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type StoresRelationFilter = {
    is?: StoresWhereInput
    isNot?: StoresWhereInput
  }

  export type LikesCountOrderByAggregateInput = {
    likeId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type LikesAvgOrderByAggregateInput = {
    likeId?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type LikesMaxOrderByAggregateInput = {
    likeId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type LikesMinOrderByAggregateInput = {
    likeId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type LikesSumOrderByAggregateInput = {
    likeId?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type OrdersRelationFilter = {
    is?: OrdersWhereInput
    isNot?: OrdersWhereInput
  }

  export type ReviewsCountOrderByAggregateInput = {
    reviewId?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    storeId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type ReviewsAvgOrderByAggregateInput = {
    reviewId?: SortOrder
    star?: SortOrder
    storeId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type ReviewsMaxOrderByAggregateInput = {
    reviewId?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    storeId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type ReviewsMinOrderByAggregateInput = {
    reviewId?: SortOrder
    content?: SortOrder
    star?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    storeId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type ReviewsSumOrderByAggregateInput = {
    reviewId?: SortOrder
    star?: SortOrder
    storeId?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type ReviewsNullableRelationFilter = {
    is?: ReviewsWhereInput | null
    isNot?: ReviewsWhereInput | null
  }

  export type OrdersItemsListRelationFilter = {
    every?: OrdersItemsWhereInput
    some?: OrdersItemsWhereInput
    none?: OrdersItemsWhereInput
  }

  export type OrdersItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrdersCountOrderByAggregateInput = {
    orderId?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    ordered?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type OrdersAvgOrderByAggregateInput = {
    orderId?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type OrdersMaxOrderByAggregateInput = {
    orderId?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    ordered?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type OrdersMinOrderByAggregateInput = {
    orderId?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    ordered?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type OrdersSumOrderByAggregateInput = {
    orderId?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    userId?: SortOrder
    storeId?: SortOrder
  }

  export type ItemsRelationFilter = {
    is?: ItemsWhereInput
    isNot?: ItemsWhereInput
  }

  export type OrdersItemsCountOrderByAggregateInput = {
    orderItemId?: SortOrder
    count?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrdersItemsAvgOrderByAggregateInput = {
    orderItemId?: SortOrder
    count?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
  }

  export type OrdersItemsMaxOrderByAggregateInput = {
    orderItemId?: SortOrder
    count?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrdersItemsMinOrderByAggregateInput = {
    orderItemId?: SortOrder
    count?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrdersItemsSumOrderByAggregateInput = {
    orderItemId?: SortOrder
    count?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
  }

  export type ItemsCountOrderByAggregateInput = {
    itemId?: SortOrder
    name?: SortOrder
    prevPrice?: SortOrder
    price?: SortOrder
    count?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    imgUrl?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    storeId?: SortOrder
  }

  export type ItemsAvgOrderByAggregateInput = {
    itemId?: SortOrder
    prevPrice?: SortOrder
    price?: SortOrder
    count?: SortOrder
    storeId?: SortOrder
  }

  export type ItemsMaxOrderByAggregateInput = {
    itemId?: SortOrder
    name?: SortOrder
    prevPrice?: SortOrder
    price?: SortOrder
    count?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    imgUrl?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    storeId?: SortOrder
  }

  export type ItemsMinOrderByAggregateInput = {
    itemId?: SortOrder
    name?: SortOrder
    prevPrice?: SortOrder
    price?: SortOrder
    count?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    imgUrl?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    storeId?: SortOrder
  }

  export type ItemsSumOrderByAggregateInput = {
    itemId?: SortOrder
    prevPrice?: SortOrder
    price?: SortOrder
    count?: SortOrder
    storeId?: SortOrder
  }

  export type AlarmsCountOrderByAggregateInput = {
    alarmId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    storeId?: SortOrder
  }

  export type AlarmsAvgOrderByAggregateInput = {
    alarmId?: SortOrder
    storeId?: SortOrder
  }

  export type AlarmsMaxOrderByAggregateInput = {
    alarmId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    storeId?: SortOrder
  }

  export type AlarmsMinOrderByAggregateInput = {
    alarmId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    storeId?: SortOrder
  }

  export type AlarmsSumOrderByAggregateInput = {
    alarmId?: SortOrder
    storeId?: SortOrder
  }

  export type LikesCreateNestedManyWithoutUserInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type OrdersCreateNestedManyWithoutUserInput = {
    create?: XOR<OrdersCreateWithoutUserInput, OrdersUncheckedCreateWithoutUserInput> | OrdersCreateWithoutUserInput[] | OrdersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutUserInput | OrdersCreateOrConnectWithoutUserInput[]
    createMany?: OrdersCreateManyUserInputEnvelope
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
  }

  export type ReviewsCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewsCreateWithoutUserInput, ReviewsUncheckedCreateWithoutUserInput> | ReviewsCreateWithoutUserInput[] | ReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutUserInput | ReviewsCreateOrConnectWithoutUserInput[]
    createMany?: ReviewsCreateManyUserInputEnvelope
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
  }

  export type StoresCreateNestedOneWithoutOwnerInput = {
    create?: XOR<StoresCreateWithoutOwnerInput, StoresUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: StoresCreateOrConnectWithoutOwnerInput
    connect?: StoresWhereUniqueInput
  }

  export type LikesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type OrdersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrdersCreateWithoutUserInput, OrdersUncheckedCreateWithoutUserInput> | OrdersCreateWithoutUserInput[] | OrdersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutUserInput | OrdersCreateOrConnectWithoutUserInput[]
    createMany?: OrdersCreateManyUserInputEnvelope
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
  }

  export type ReviewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewsCreateWithoutUserInput, ReviewsUncheckedCreateWithoutUserInput> | ReviewsCreateWithoutUserInput[] | ReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutUserInput | ReviewsCreateOrConnectWithoutUserInput[]
    createMany?: ReviewsCreateManyUserInputEnvelope
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
  }

  export type StoresUncheckedCreateNestedOneWithoutOwnerInput = {
    create?: XOR<StoresCreateWithoutOwnerInput, StoresUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: StoresCreateOrConnectWithoutOwnerInput
    connect?: StoresWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type LikesUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutUserInput | LikesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutUserInput | LikesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutUserInput | LikesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type OrdersUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrdersCreateWithoutUserInput, OrdersUncheckedCreateWithoutUserInput> | OrdersCreateWithoutUserInput[] | OrdersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutUserInput | OrdersCreateOrConnectWithoutUserInput[]
    upsert?: OrdersUpsertWithWhereUniqueWithoutUserInput | OrdersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrdersCreateManyUserInputEnvelope
    set?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    disconnect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    delete?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    update?: OrdersUpdateWithWhereUniqueWithoutUserInput | OrdersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrdersUpdateManyWithWhereWithoutUserInput | OrdersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrdersScalarWhereInput | OrdersScalarWhereInput[]
  }

  export type ReviewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewsCreateWithoutUserInput, ReviewsUncheckedCreateWithoutUserInput> | ReviewsCreateWithoutUserInput[] | ReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutUserInput | ReviewsCreateOrConnectWithoutUserInput[]
    upsert?: ReviewsUpsertWithWhereUniqueWithoutUserInput | ReviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewsCreateManyUserInputEnvelope
    set?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    disconnect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    delete?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    update?: ReviewsUpdateWithWhereUniqueWithoutUserInput | ReviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewsUpdateManyWithWhereWithoutUserInput | ReviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewsScalarWhereInput | ReviewsScalarWhereInput[]
  }

  export type StoresUpdateOneWithoutOwnerNestedInput = {
    create?: XOR<StoresCreateWithoutOwnerInput, StoresUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: StoresCreateOrConnectWithoutOwnerInput
    upsert?: StoresUpsertWithoutOwnerInput
    disconnect?: StoresWhereInput | boolean
    delete?: StoresWhereInput | boolean
    connect?: StoresWhereUniqueInput
    update?: XOR<XOR<StoresUpdateToOneWithWhereWithoutOwnerInput, StoresUpdateWithoutOwnerInput>, StoresUncheckedUpdateWithoutOwnerInput>
  }

  export type LikesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutUserInput | LikesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutUserInput | LikesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutUserInput | LikesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type OrdersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrdersCreateWithoutUserInput, OrdersUncheckedCreateWithoutUserInput> | OrdersCreateWithoutUserInput[] | OrdersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutUserInput | OrdersCreateOrConnectWithoutUserInput[]
    upsert?: OrdersUpsertWithWhereUniqueWithoutUserInput | OrdersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrdersCreateManyUserInputEnvelope
    set?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    disconnect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    delete?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    update?: OrdersUpdateWithWhereUniqueWithoutUserInput | OrdersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrdersUpdateManyWithWhereWithoutUserInput | OrdersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrdersScalarWhereInput | OrdersScalarWhereInput[]
  }

  export type ReviewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewsCreateWithoutUserInput, ReviewsUncheckedCreateWithoutUserInput> | ReviewsCreateWithoutUserInput[] | ReviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutUserInput | ReviewsCreateOrConnectWithoutUserInput[]
    upsert?: ReviewsUpsertWithWhereUniqueWithoutUserInput | ReviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewsCreateManyUserInputEnvelope
    set?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    disconnect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    delete?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    update?: ReviewsUpdateWithWhereUniqueWithoutUserInput | ReviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewsUpdateManyWithWhereWithoutUserInput | ReviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewsScalarWhereInput | ReviewsScalarWhereInput[]
  }

  export type StoresUncheckedUpdateOneWithoutOwnerNestedInput = {
    create?: XOR<StoresCreateWithoutOwnerInput, StoresUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: StoresCreateOrConnectWithoutOwnerInput
    upsert?: StoresUpsertWithoutOwnerInput
    disconnect?: StoresWhereInput | boolean
    delete?: StoresWhereInput | boolean
    connect?: StoresWhereUniqueInput
    update?: XOR<XOR<StoresUpdateToOneWithWhereWithoutOwnerInput, StoresUpdateWithoutOwnerInput>, StoresUncheckedUpdateWithoutOwnerInput>
  }

  export type UsersCreateNestedOneWithoutStoreInput = {
    create?: XOR<UsersCreateWithoutStoreInput, UsersUncheckedCreateWithoutStoreInput>
    connectOrCreate?: UsersCreateOrConnectWithoutStoreInput
    connect?: UsersWhereUniqueInput
  }

  export type LikesCreateNestedManyWithoutStoreInput = {
    create?: XOR<LikesCreateWithoutStoreInput, LikesUncheckedCreateWithoutStoreInput> | LikesCreateWithoutStoreInput[] | LikesUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutStoreInput | LikesCreateOrConnectWithoutStoreInput[]
    createMany?: LikesCreateManyStoreInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type ItemsCreateNestedManyWithoutStoreInput = {
    create?: XOR<ItemsCreateWithoutStoreInput, ItemsUncheckedCreateWithoutStoreInput> | ItemsCreateWithoutStoreInput[] | ItemsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutStoreInput | ItemsCreateOrConnectWithoutStoreInput[]
    createMany?: ItemsCreateManyStoreInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type ReviewsCreateNestedManyWithoutStoreInput = {
    create?: XOR<ReviewsCreateWithoutStoreInput, ReviewsUncheckedCreateWithoutStoreInput> | ReviewsCreateWithoutStoreInput[] | ReviewsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutStoreInput | ReviewsCreateOrConnectWithoutStoreInput[]
    createMany?: ReviewsCreateManyStoreInputEnvelope
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
  }

  export type AlarmsCreateNestedManyWithoutStoreInput = {
    create?: XOR<AlarmsCreateWithoutStoreInput, AlarmsUncheckedCreateWithoutStoreInput> | AlarmsCreateWithoutStoreInput[] | AlarmsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AlarmsCreateOrConnectWithoutStoreInput | AlarmsCreateOrConnectWithoutStoreInput[]
    createMany?: AlarmsCreateManyStoreInputEnvelope
    connect?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
  }

  export type OrdersCreateNestedManyWithoutStoreInput = {
    create?: XOR<OrdersCreateWithoutStoreInput, OrdersUncheckedCreateWithoutStoreInput> | OrdersCreateWithoutStoreInput[] | OrdersUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutStoreInput | OrdersCreateOrConnectWithoutStoreInput[]
    createMany?: OrdersCreateManyStoreInputEnvelope
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
  }

  export type LikesUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<LikesCreateWithoutStoreInput, LikesUncheckedCreateWithoutStoreInput> | LikesCreateWithoutStoreInput[] | LikesUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutStoreInput | LikesCreateOrConnectWithoutStoreInput[]
    createMany?: LikesCreateManyStoreInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type ItemsUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<ItemsCreateWithoutStoreInput, ItemsUncheckedCreateWithoutStoreInput> | ItemsCreateWithoutStoreInput[] | ItemsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutStoreInput | ItemsCreateOrConnectWithoutStoreInput[]
    createMany?: ItemsCreateManyStoreInputEnvelope
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
  }

  export type ReviewsUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<ReviewsCreateWithoutStoreInput, ReviewsUncheckedCreateWithoutStoreInput> | ReviewsCreateWithoutStoreInput[] | ReviewsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutStoreInput | ReviewsCreateOrConnectWithoutStoreInput[]
    createMany?: ReviewsCreateManyStoreInputEnvelope
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
  }

  export type AlarmsUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<AlarmsCreateWithoutStoreInput, AlarmsUncheckedCreateWithoutStoreInput> | AlarmsCreateWithoutStoreInput[] | AlarmsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AlarmsCreateOrConnectWithoutStoreInput | AlarmsCreateOrConnectWithoutStoreInput[]
    createMany?: AlarmsCreateManyStoreInputEnvelope
    connect?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
  }

  export type OrdersUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<OrdersCreateWithoutStoreInput, OrdersUncheckedCreateWithoutStoreInput> | OrdersCreateWithoutStoreInput[] | OrdersUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutStoreInput | OrdersCreateOrConnectWithoutStoreInput[]
    createMany?: OrdersCreateManyStoreInputEnvelope
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsersUpdateOneWithoutStoreNestedInput = {
    create?: XOR<UsersCreateWithoutStoreInput, UsersUncheckedCreateWithoutStoreInput>
    connectOrCreate?: UsersCreateOrConnectWithoutStoreInput
    upsert?: UsersUpsertWithoutStoreInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutStoreInput, UsersUpdateWithoutStoreInput>, UsersUncheckedUpdateWithoutStoreInput>
  }

  export type LikesUpdateManyWithoutStoreNestedInput = {
    create?: XOR<LikesCreateWithoutStoreInput, LikesUncheckedCreateWithoutStoreInput> | LikesCreateWithoutStoreInput[] | LikesUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutStoreInput | LikesCreateOrConnectWithoutStoreInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutStoreInput | LikesUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: LikesCreateManyStoreInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutStoreInput | LikesUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutStoreInput | LikesUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type ItemsUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ItemsCreateWithoutStoreInput, ItemsUncheckedCreateWithoutStoreInput> | ItemsCreateWithoutStoreInput[] | ItemsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutStoreInput | ItemsCreateOrConnectWithoutStoreInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutStoreInput | ItemsUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ItemsCreateManyStoreInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutStoreInput | ItemsUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutStoreInput | ItemsUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type ReviewsUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ReviewsCreateWithoutStoreInput, ReviewsUncheckedCreateWithoutStoreInput> | ReviewsCreateWithoutStoreInput[] | ReviewsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutStoreInput | ReviewsCreateOrConnectWithoutStoreInput[]
    upsert?: ReviewsUpsertWithWhereUniqueWithoutStoreInput | ReviewsUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ReviewsCreateManyStoreInputEnvelope
    set?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    disconnect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    delete?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    update?: ReviewsUpdateWithWhereUniqueWithoutStoreInput | ReviewsUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ReviewsUpdateManyWithWhereWithoutStoreInput | ReviewsUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ReviewsScalarWhereInput | ReviewsScalarWhereInput[]
  }

  export type AlarmsUpdateManyWithoutStoreNestedInput = {
    create?: XOR<AlarmsCreateWithoutStoreInput, AlarmsUncheckedCreateWithoutStoreInput> | AlarmsCreateWithoutStoreInput[] | AlarmsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AlarmsCreateOrConnectWithoutStoreInput | AlarmsCreateOrConnectWithoutStoreInput[]
    upsert?: AlarmsUpsertWithWhereUniqueWithoutStoreInput | AlarmsUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: AlarmsCreateManyStoreInputEnvelope
    set?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    disconnect?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    delete?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    connect?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    update?: AlarmsUpdateWithWhereUniqueWithoutStoreInput | AlarmsUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: AlarmsUpdateManyWithWhereWithoutStoreInput | AlarmsUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: AlarmsScalarWhereInput | AlarmsScalarWhereInput[]
  }

  export type OrdersUpdateManyWithoutStoreNestedInput = {
    create?: XOR<OrdersCreateWithoutStoreInput, OrdersUncheckedCreateWithoutStoreInput> | OrdersCreateWithoutStoreInput[] | OrdersUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutStoreInput | OrdersCreateOrConnectWithoutStoreInput[]
    upsert?: OrdersUpsertWithWhereUniqueWithoutStoreInput | OrdersUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: OrdersCreateManyStoreInputEnvelope
    set?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    disconnect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    delete?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    update?: OrdersUpdateWithWhereUniqueWithoutStoreInput | OrdersUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: OrdersUpdateManyWithWhereWithoutStoreInput | OrdersUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: OrdersScalarWhereInput | OrdersScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LikesUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<LikesCreateWithoutStoreInput, LikesUncheckedCreateWithoutStoreInput> | LikesCreateWithoutStoreInput[] | LikesUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutStoreInput | LikesCreateOrConnectWithoutStoreInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutStoreInput | LikesUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: LikesCreateManyStoreInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutStoreInput | LikesUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutStoreInput | LikesUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type ItemsUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ItemsCreateWithoutStoreInput, ItemsUncheckedCreateWithoutStoreInput> | ItemsCreateWithoutStoreInput[] | ItemsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ItemsCreateOrConnectWithoutStoreInput | ItemsCreateOrConnectWithoutStoreInput[]
    upsert?: ItemsUpsertWithWhereUniqueWithoutStoreInput | ItemsUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ItemsCreateManyStoreInputEnvelope
    set?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    disconnect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    delete?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    connect?: ItemsWhereUniqueInput | ItemsWhereUniqueInput[]
    update?: ItemsUpdateWithWhereUniqueWithoutStoreInput | ItemsUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ItemsUpdateManyWithWhereWithoutStoreInput | ItemsUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
  }

  export type ReviewsUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ReviewsCreateWithoutStoreInput, ReviewsUncheckedCreateWithoutStoreInput> | ReviewsCreateWithoutStoreInput[] | ReviewsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReviewsCreateOrConnectWithoutStoreInput | ReviewsCreateOrConnectWithoutStoreInput[]
    upsert?: ReviewsUpsertWithWhereUniqueWithoutStoreInput | ReviewsUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ReviewsCreateManyStoreInputEnvelope
    set?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    disconnect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    delete?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    connect?: ReviewsWhereUniqueInput | ReviewsWhereUniqueInput[]
    update?: ReviewsUpdateWithWhereUniqueWithoutStoreInput | ReviewsUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ReviewsUpdateManyWithWhereWithoutStoreInput | ReviewsUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ReviewsScalarWhereInput | ReviewsScalarWhereInput[]
  }

  export type AlarmsUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<AlarmsCreateWithoutStoreInput, AlarmsUncheckedCreateWithoutStoreInput> | AlarmsCreateWithoutStoreInput[] | AlarmsUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AlarmsCreateOrConnectWithoutStoreInput | AlarmsCreateOrConnectWithoutStoreInput[]
    upsert?: AlarmsUpsertWithWhereUniqueWithoutStoreInput | AlarmsUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: AlarmsCreateManyStoreInputEnvelope
    set?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    disconnect?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    delete?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    connect?: AlarmsWhereUniqueInput | AlarmsWhereUniqueInput[]
    update?: AlarmsUpdateWithWhereUniqueWithoutStoreInput | AlarmsUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: AlarmsUpdateManyWithWhereWithoutStoreInput | AlarmsUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: AlarmsScalarWhereInput | AlarmsScalarWhereInput[]
  }

  export type OrdersUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<OrdersCreateWithoutStoreInput, OrdersUncheckedCreateWithoutStoreInput> | OrdersCreateWithoutStoreInput[] | OrdersUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrdersCreateOrConnectWithoutStoreInput | OrdersCreateOrConnectWithoutStoreInput[]
    upsert?: OrdersUpsertWithWhereUniqueWithoutStoreInput | OrdersUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: OrdersCreateManyStoreInputEnvelope
    set?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    disconnect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    delete?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    connect?: OrdersWhereUniqueInput | OrdersWhereUniqueInput[]
    update?: OrdersUpdateWithWhereUniqueWithoutStoreInput | OrdersUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: OrdersUpdateManyWithWhereWithoutStoreInput | OrdersUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: OrdersScalarWhereInput | OrdersScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutLikesInput = {
    create?: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikesInput
    connect?: UsersWhereUniqueInput
  }

  export type StoresCreateNestedOneWithoutLikesInput = {
    create?: XOR<StoresCreateWithoutLikesInput, StoresUncheckedCreateWithoutLikesInput>
    connectOrCreate?: StoresCreateOrConnectWithoutLikesInput
    connect?: StoresWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikesInput
    upsert?: UsersUpsertWithoutLikesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutLikesInput, UsersUpdateWithoutLikesInput>, UsersUncheckedUpdateWithoutLikesInput>
  }

  export type StoresUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<StoresCreateWithoutLikesInput, StoresUncheckedCreateWithoutLikesInput>
    connectOrCreate?: StoresCreateOrConnectWithoutLikesInput
    upsert?: StoresUpsertWithoutLikesInput
    connect?: StoresWhereUniqueInput
    update?: XOR<XOR<StoresUpdateToOneWithWhereWithoutLikesInput, StoresUpdateWithoutLikesInput>, StoresUncheckedUpdateWithoutLikesInput>
  }

  export type StoresCreateNestedOneWithoutReviewsInput = {
    create?: XOR<StoresCreateWithoutReviewsInput, StoresUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: StoresCreateOrConnectWithoutReviewsInput
    connect?: StoresWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReviewsInput
    connect?: UsersWhereUniqueInput
  }

  export type OrdersCreateNestedOneWithoutReviewInput = {
    create?: XOR<OrdersCreateWithoutReviewInput, OrdersUncheckedCreateWithoutReviewInput>
    connectOrCreate?: OrdersCreateOrConnectWithoutReviewInput
    connect?: OrdersWhereUniqueInput
  }

  export type StoresUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<StoresCreateWithoutReviewsInput, StoresUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: StoresCreateOrConnectWithoutReviewsInput
    upsert?: StoresUpsertWithoutReviewsInput
    connect?: StoresWhereUniqueInput
    update?: XOR<XOR<StoresUpdateToOneWithWhereWithoutReviewsInput, StoresUpdateWithoutReviewsInput>, StoresUncheckedUpdateWithoutReviewsInput>
  }

  export type UsersUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReviewsInput
    upsert?: UsersUpsertWithoutReviewsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutReviewsInput, UsersUpdateWithoutReviewsInput>, UsersUncheckedUpdateWithoutReviewsInput>
  }

  export type OrdersUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<OrdersCreateWithoutReviewInput, OrdersUncheckedCreateWithoutReviewInput>
    connectOrCreate?: OrdersCreateOrConnectWithoutReviewInput
    upsert?: OrdersUpsertWithoutReviewInput
    connect?: OrdersWhereUniqueInput
    update?: XOR<XOR<OrdersUpdateToOneWithWhereWithoutReviewInput, OrdersUpdateWithoutReviewInput>, OrdersUncheckedUpdateWithoutReviewInput>
  }

  export type UsersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOrdersInput
    connect?: UsersWhereUniqueInput
  }

  export type StoresCreateNestedOneWithoutOrdersInput = {
    create?: XOR<StoresCreateWithoutOrdersInput, StoresUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: StoresCreateOrConnectWithoutOrdersInput
    connect?: StoresWhereUniqueInput
  }

  export type ReviewsCreateNestedOneWithoutOrderInput = {
    create?: XOR<ReviewsCreateWithoutOrderInput, ReviewsUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewsCreateOrConnectWithoutOrderInput
    connect?: ReviewsWhereUniqueInput
  }

  export type OrdersItemsCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrdersItemsCreateWithoutOrderInput, OrdersItemsUncheckedCreateWithoutOrderInput> | OrdersItemsCreateWithoutOrderInput[] | OrdersItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutOrderInput | OrdersItemsCreateOrConnectWithoutOrderInput[]
    createMany?: OrdersItemsCreateManyOrderInputEnvelope
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
  }

  export type ReviewsUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<ReviewsCreateWithoutOrderInput, ReviewsUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewsCreateOrConnectWithoutOrderInput
    connect?: ReviewsWhereUniqueInput
  }

  export type OrdersItemsUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrdersItemsCreateWithoutOrderInput, OrdersItemsUncheckedCreateWithoutOrderInput> | OrdersItemsCreateWithoutOrderInput[] | OrdersItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutOrderInput | OrdersItemsCreateOrConnectWithoutOrderInput[]
    createMany?: OrdersItemsCreateManyOrderInputEnvelope
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOrdersInput
    upsert?: UsersUpsertWithoutOrdersInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutOrdersInput, UsersUpdateWithoutOrdersInput>, UsersUncheckedUpdateWithoutOrdersInput>
  }

  export type StoresUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<StoresCreateWithoutOrdersInput, StoresUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: StoresCreateOrConnectWithoutOrdersInput
    upsert?: StoresUpsertWithoutOrdersInput
    connect?: StoresWhereUniqueInput
    update?: XOR<XOR<StoresUpdateToOneWithWhereWithoutOrdersInput, StoresUpdateWithoutOrdersInput>, StoresUncheckedUpdateWithoutOrdersInput>
  }

  export type ReviewsUpdateOneWithoutOrderNestedInput = {
    create?: XOR<ReviewsCreateWithoutOrderInput, ReviewsUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewsCreateOrConnectWithoutOrderInput
    upsert?: ReviewsUpsertWithoutOrderInput
    disconnect?: ReviewsWhereInput | boolean
    delete?: ReviewsWhereInput | boolean
    connect?: ReviewsWhereUniqueInput
    update?: XOR<XOR<ReviewsUpdateToOneWithWhereWithoutOrderInput, ReviewsUpdateWithoutOrderInput>, ReviewsUncheckedUpdateWithoutOrderInput>
  }

  export type OrdersItemsUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrdersItemsCreateWithoutOrderInput, OrdersItemsUncheckedCreateWithoutOrderInput> | OrdersItemsCreateWithoutOrderInput[] | OrdersItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutOrderInput | OrdersItemsCreateOrConnectWithoutOrderInput[]
    upsert?: OrdersItemsUpsertWithWhereUniqueWithoutOrderInput | OrdersItemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrdersItemsCreateManyOrderInputEnvelope
    set?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    disconnect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    delete?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    update?: OrdersItemsUpdateWithWhereUniqueWithoutOrderInput | OrdersItemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrdersItemsUpdateManyWithWhereWithoutOrderInput | OrdersItemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrdersItemsScalarWhereInput | OrdersItemsScalarWhereInput[]
  }

  export type ReviewsUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<ReviewsCreateWithoutOrderInput, ReviewsUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ReviewsCreateOrConnectWithoutOrderInput
    upsert?: ReviewsUpsertWithoutOrderInput
    disconnect?: ReviewsWhereInput | boolean
    delete?: ReviewsWhereInput | boolean
    connect?: ReviewsWhereUniqueInput
    update?: XOR<XOR<ReviewsUpdateToOneWithWhereWithoutOrderInput, ReviewsUpdateWithoutOrderInput>, ReviewsUncheckedUpdateWithoutOrderInput>
  }

  export type OrdersItemsUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrdersItemsCreateWithoutOrderInput, OrdersItemsUncheckedCreateWithoutOrderInput> | OrdersItemsCreateWithoutOrderInput[] | OrdersItemsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutOrderInput | OrdersItemsCreateOrConnectWithoutOrderInput[]
    upsert?: OrdersItemsUpsertWithWhereUniqueWithoutOrderInput | OrdersItemsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrdersItemsCreateManyOrderInputEnvelope
    set?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    disconnect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    delete?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    update?: OrdersItemsUpdateWithWhereUniqueWithoutOrderInput | OrdersItemsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrdersItemsUpdateManyWithWhereWithoutOrderInput | OrdersItemsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrdersItemsScalarWhereInput | OrdersItemsScalarWhereInput[]
  }

  export type OrdersCreateNestedOneWithoutOrdersItemsInput = {
    create?: XOR<OrdersCreateWithoutOrdersItemsInput, OrdersUncheckedCreateWithoutOrdersItemsInput>
    connectOrCreate?: OrdersCreateOrConnectWithoutOrdersItemsInput
    connect?: OrdersWhereUniqueInput
  }

  export type ItemsCreateNestedOneWithoutOrdersItemsInput = {
    create?: XOR<ItemsCreateWithoutOrdersItemsInput, ItemsUncheckedCreateWithoutOrdersItemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutOrdersItemsInput
    connect?: ItemsWhereUniqueInput
  }

  export type OrdersUpdateOneRequiredWithoutOrdersItemsNestedInput = {
    create?: XOR<OrdersCreateWithoutOrdersItemsInput, OrdersUncheckedCreateWithoutOrdersItemsInput>
    connectOrCreate?: OrdersCreateOrConnectWithoutOrdersItemsInput
    upsert?: OrdersUpsertWithoutOrdersItemsInput
    connect?: OrdersWhereUniqueInput
    update?: XOR<XOR<OrdersUpdateToOneWithWhereWithoutOrdersItemsInput, OrdersUpdateWithoutOrdersItemsInput>, OrdersUncheckedUpdateWithoutOrdersItemsInput>
  }

  export type ItemsUpdateOneRequiredWithoutOrdersItemsNestedInput = {
    create?: XOR<ItemsCreateWithoutOrdersItemsInput, ItemsUncheckedCreateWithoutOrdersItemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutOrdersItemsInput
    upsert?: ItemsUpsertWithoutOrdersItemsInput
    connect?: ItemsWhereUniqueInput
    update?: XOR<XOR<ItemsUpdateToOneWithWhereWithoutOrdersItemsInput, ItemsUpdateWithoutOrdersItemsInput>, ItemsUncheckedUpdateWithoutOrdersItemsInput>
  }

  export type StoresCreateNestedOneWithoutItemsInput = {
    create?: XOR<StoresCreateWithoutItemsInput, StoresUncheckedCreateWithoutItemsInput>
    connectOrCreate?: StoresCreateOrConnectWithoutItemsInput
    connect?: StoresWhereUniqueInput
  }

  export type OrdersItemsCreateNestedManyWithoutItemInput = {
    create?: XOR<OrdersItemsCreateWithoutItemInput, OrdersItemsUncheckedCreateWithoutItemInput> | OrdersItemsCreateWithoutItemInput[] | OrdersItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutItemInput | OrdersItemsCreateOrConnectWithoutItemInput[]
    createMany?: OrdersItemsCreateManyItemInputEnvelope
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
  }

  export type OrdersItemsUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<OrdersItemsCreateWithoutItemInput, OrdersItemsUncheckedCreateWithoutItemInput> | OrdersItemsCreateWithoutItemInput[] | OrdersItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutItemInput | OrdersItemsCreateOrConnectWithoutItemInput[]
    createMany?: OrdersItemsCreateManyItemInputEnvelope
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
  }

  export type StoresUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<StoresCreateWithoutItemsInput, StoresUncheckedCreateWithoutItemsInput>
    connectOrCreate?: StoresCreateOrConnectWithoutItemsInput
    upsert?: StoresUpsertWithoutItemsInput
    connect?: StoresWhereUniqueInput
    update?: XOR<XOR<StoresUpdateToOneWithWhereWithoutItemsInput, StoresUpdateWithoutItemsInput>, StoresUncheckedUpdateWithoutItemsInput>
  }

  export type OrdersItemsUpdateManyWithoutItemNestedInput = {
    create?: XOR<OrdersItemsCreateWithoutItemInput, OrdersItemsUncheckedCreateWithoutItemInput> | OrdersItemsCreateWithoutItemInput[] | OrdersItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutItemInput | OrdersItemsCreateOrConnectWithoutItemInput[]
    upsert?: OrdersItemsUpsertWithWhereUniqueWithoutItemInput | OrdersItemsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: OrdersItemsCreateManyItemInputEnvelope
    set?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    disconnect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    delete?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    update?: OrdersItemsUpdateWithWhereUniqueWithoutItemInput | OrdersItemsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: OrdersItemsUpdateManyWithWhereWithoutItemInput | OrdersItemsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: OrdersItemsScalarWhereInput | OrdersItemsScalarWhereInput[]
  }

  export type OrdersItemsUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<OrdersItemsCreateWithoutItemInput, OrdersItemsUncheckedCreateWithoutItemInput> | OrdersItemsCreateWithoutItemInput[] | OrdersItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OrdersItemsCreateOrConnectWithoutItemInput | OrdersItemsCreateOrConnectWithoutItemInput[]
    upsert?: OrdersItemsUpsertWithWhereUniqueWithoutItemInput | OrdersItemsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: OrdersItemsCreateManyItemInputEnvelope
    set?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    disconnect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    delete?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    connect?: OrdersItemsWhereUniqueInput | OrdersItemsWhereUniqueInput[]
    update?: OrdersItemsUpdateWithWhereUniqueWithoutItemInput | OrdersItemsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: OrdersItemsUpdateManyWithWhereWithoutItemInput | OrdersItemsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: OrdersItemsScalarWhereInput | OrdersItemsScalarWhereInput[]
  }

  export type StoresCreateNestedOneWithoutAlarmsInput = {
    create?: XOR<StoresCreateWithoutAlarmsInput, StoresUncheckedCreateWithoutAlarmsInput>
    connectOrCreate?: StoresCreateOrConnectWithoutAlarmsInput
    connect?: StoresWhereUniqueInput
  }

  export type StoresUpdateOneRequiredWithoutAlarmsNestedInput = {
    create?: XOR<StoresCreateWithoutAlarmsInput, StoresUncheckedCreateWithoutAlarmsInput>
    connectOrCreate?: StoresCreateOrConnectWithoutAlarmsInput
    upsert?: StoresUpsertWithoutAlarmsInput
    connect?: StoresWhereUniqueInput
    update?: XOR<XOR<StoresUpdateToOneWithWhereWithoutAlarmsInput, StoresUpdateWithoutAlarmsInput>, StoresUncheckedUpdateWithoutAlarmsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type LikesCreateWithoutUserInput = {
    createdAt?: Date | string
    Store: StoresCreateNestedOneWithoutLikesInput
  }

  export type LikesUncheckedCreateWithoutUserInput = {
    likeId?: number
    createdAt?: Date | string
    storeId: number
  }

  export type LikesCreateOrConnectWithoutUserInput = {
    where: LikesWhereUniqueInput
    create: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput>
  }

  export type LikesCreateManyUserInputEnvelope = {
    data: LikesCreateManyUserInput | LikesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrdersCreateWithoutUserInput = {
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    Store: StoresCreateNestedOneWithoutOrdersInput
    Review?: ReviewsCreateNestedOneWithoutOrderInput
    OrdersItems?: OrdersItemsCreateNestedManyWithoutOrderInput
  }

  export type OrdersUncheckedCreateWithoutUserInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    storeId: number
    Review?: ReviewsUncheckedCreateNestedOneWithoutOrderInput
    OrdersItems?: OrdersItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrdersCreateOrConnectWithoutUserInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutUserInput, OrdersUncheckedCreateWithoutUserInput>
  }

  export type OrdersCreateManyUserInputEnvelope = {
    data: OrdersCreateManyUserInput | OrdersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewsCreateWithoutUserInput = {
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    Store: StoresCreateNestedOneWithoutReviewsInput
    Order: OrdersCreateNestedOneWithoutReviewInput
  }

  export type ReviewsUncheckedCreateWithoutUserInput = {
    reviewId?: number
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
    orderId: number
  }

  export type ReviewsCreateOrConnectWithoutUserInput = {
    where: ReviewsWhereUniqueInput
    create: XOR<ReviewsCreateWithoutUserInput, ReviewsUncheckedCreateWithoutUserInput>
  }

  export type ReviewsCreateManyUserInputEnvelope = {
    data: ReviewsCreateManyUserInput | ReviewsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StoresCreateWithoutOwnerInput = {
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Likes?: LikesCreateNestedManyWithoutStoreInput
    Items?: ItemsCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsCreateNestedManyWithoutStoreInput
    Orders?: OrdersCreateNestedManyWithoutStoreInput
  }

  export type StoresUncheckedCreateWithoutOwnerInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Likes?: LikesUncheckedCreateNestedManyWithoutStoreInput
    Items?: ItemsUncheckedCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsUncheckedCreateNestedManyWithoutStoreInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoresCreateOrConnectWithoutOwnerInput = {
    where: StoresWhereUniqueInput
    create: XOR<StoresCreateWithoutOwnerInput, StoresUncheckedCreateWithoutOwnerInput>
  }

  export type LikesUpsertWithWhereUniqueWithoutUserInput = {
    where: LikesWhereUniqueInput
    update: XOR<LikesUpdateWithoutUserInput, LikesUncheckedUpdateWithoutUserInput>
    create: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput>
  }

  export type LikesUpdateWithWhereUniqueWithoutUserInput = {
    where: LikesWhereUniqueInput
    data: XOR<LikesUpdateWithoutUserInput, LikesUncheckedUpdateWithoutUserInput>
  }

  export type LikesUpdateManyWithWhereWithoutUserInput = {
    where: LikesScalarWhereInput
    data: XOR<LikesUpdateManyMutationInput, LikesUncheckedUpdateManyWithoutUserInput>
  }

  export type LikesScalarWhereInput = {
    AND?: LikesScalarWhereInput | LikesScalarWhereInput[]
    OR?: LikesScalarWhereInput[]
    NOT?: LikesScalarWhereInput | LikesScalarWhereInput[]
    likeId?: IntFilter<"Likes"> | number
    createdAt?: DateTimeFilter<"Likes"> | Date | string
    userId?: IntFilter<"Likes"> | number
    storeId?: IntFilter<"Likes"> | number
  }

  export type OrdersUpsertWithWhereUniqueWithoutUserInput = {
    where: OrdersWhereUniqueInput
    update: XOR<OrdersUpdateWithoutUserInput, OrdersUncheckedUpdateWithoutUserInput>
    create: XOR<OrdersCreateWithoutUserInput, OrdersUncheckedCreateWithoutUserInput>
  }

  export type OrdersUpdateWithWhereUniqueWithoutUserInput = {
    where: OrdersWhereUniqueInput
    data: XOR<OrdersUpdateWithoutUserInput, OrdersUncheckedUpdateWithoutUserInput>
  }

  export type OrdersUpdateManyWithWhereWithoutUserInput = {
    where: OrdersScalarWhereInput
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyWithoutUserInput>
  }

  export type OrdersScalarWhereInput = {
    AND?: OrdersScalarWhereInput | OrdersScalarWhereInput[]
    OR?: OrdersScalarWhereInput[]
    NOT?: OrdersScalarWhereInput | OrdersScalarWhereInput[]
    orderId?: IntFilter<"Orders"> | number
    discount?: IntFilter<"Orders"> | number
    totalPrice?: IntFilter<"Orders"> | number
    createdAt?: DateTimeFilter<"Orders"> | Date | string
    updatedAt?: DateTimeFilter<"Orders"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Orders"> | Date | string | null
    ordered?: BoolFilter<"Orders"> | boolean
    userId?: IntFilter<"Orders"> | number
    storeId?: IntFilter<"Orders"> | number
  }

  export type ReviewsUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewsWhereUniqueInput
    update: XOR<ReviewsUpdateWithoutUserInput, ReviewsUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewsCreateWithoutUserInput, ReviewsUncheckedCreateWithoutUserInput>
  }

  export type ReviewsUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewsWhereUniqueInput
    data: XOR<ReviewsUpdateWithoutUserInput, ReviewsUncheckedUpdateWithoutUserInput>
  }

  export type ReviewsUpdateManyWithWhereWithoutUserInput = {
    where: ReviewsScalarWhereInput
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewsScalarWhereInput = {
    AND?: ReviewsScalarWhereInput | ReviewsScalarWhereInput[]
    OR?: ReviewsScalarWhereInput[]
    NOT?: ReviewsScalarWhereInput | ReviewsScalarWhereInput[]
    reviewId?: IntFilter<"Reviews"> | number
    content?: StringFilter<"Reviews"> | string
    star?: IntFilter<"Reviews"> | number
    createdAt?: DateTimeFilter<"Reviews"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Reviews"> | Date | string | null
    storeId?: IntFilter<"Reviews"> | number
    userId?: IntFilter<"Reviews"> | number
    orderId?: IntFilter<"Reviews"> | number
  }

  export type StoresUpsertWithoutOwnerInput = {
    update: XOR<StoresUpdateWithoutOwnerInput, StoresUncheckedUpdateWithoutOwnerInput>
    create: XOR<StoresCreateWithoutOwnerInput, StoresUncheckedCreateWithoutOwnerInput>
    where?: StoresWhereInput
  }

  export type StoresUpdateToOneWithWhereWithoutOwnerInput = {
    where?: StoresWhereInput
    data: XOR<StoresUpdateWithoutOwnerInput, StoresUncheckedUpdateWithoutOwnerInput>
  }

  export type StoresUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUpdateManyWithoutStoreNestedInput
    Items?: ItemsUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUpdateManyWithoutStoreNestedInput
  }

  export type StoresUncheckedUpdateWithoutOwnerInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUncheckedUpdateManyWithoutStoreNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUncheckedUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type UsersCreateWithoutStoreInput = {
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesCreateNestedManyWithoutUserInput
    Orders?: OrdersCreateNestedManyWithoutUserInput
    Reviews?: ReviewsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutStoreInput = {
    userId?: number
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutUserInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutStoreInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutStoreInput, UsersUncheckedCreateWithoutStoreInput>
  }

  export type LikesCreateWithoutStoreInput = {
    createdAt?: Date | string
    User: UsersCreateNestedOneWithoutLikesInput
  }

  export type LikesUncheckedCreateWithoutStoreInput = {
    likeId?: number
    createdAt?: Date | string
    userId: number
  }

  export type LikesCreateOrConnectWithoutStoreInput = {
    where: LikesWhereUniqueInput
    create: XOR<LikesCreateWithoutStoreInput, LikesUncheckedCreateWithoutStoreInput>
  }

  export type LikesCreateManyStoreInputEnvelope = {
    data: LikesCreateManyStoreInput | LikesCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type ItemsCreateWithoutStoreInput = {
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    OrdersItems?: OrdersItemsCreateNestedManyWithoutItemInput
  }

  export type ItemsUncheckedCreateWithoutStoreInput = {
    itemId?: number
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    OrdersItems?: OrdersItemsUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemsCreateOrConnectWithoutStoreInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutStoreInput, ItemsUncheckedCreateWithoutStoreInput>
  }

  export type ItemsCreateManyStoreInputEnvelope = {
    data: ItemsCreateManyStoreInput | ItemsCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type ReviewsCreateWithoutStoreInput = {
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    User: UsersCreateNestedOneWithoutReviewsInput
    Order: OrdersCreateNestedOneWithoutReviewInput
  }

  export type ReviewsUncheckedCreateWithoutStoreInput = {
    reviewId?: number
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    userId: number
    orderId: number
  }

  export type ReviewsCreateOrConnectWithoutStoreInput = {
    where: ReviewsWhereUniqueInput
    create: XOR<ReviewsCreateWithoutStoreInput, ReviewsUncheckedCreateWithoutStoreInput>
  }

  export type ReviewsCreateManyStoreInputEnvelope = {
    data: ReviewsCreateManyStoreInput | ReviewsCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type AlarmsCreateWithoutStoreInput = {
    title: string
    content: string
    createdAt?: Date | string
  }

  export type AlarmsUncheckedCreateWithoutStoreInput = {
    alarmId?: number
    title: string
    content: string
    createdAt?: Date | string
  }

  export type AlarmsCreateOrConnectWithoutStoreInput = {
    where: AlarmsWhereUniqueInput
    create: XOR<AlarmsCreateWithoutStoreInput, AlarmsUncheckedCreateWithoutStoreInput>
  }

  export type AlarmsCreateManyStoreInputEnvelope = {
    data: AlarmsCreateManyStoreInput | AlarmsCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type OrdersCreateWithoutStoreInput = {
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    User: UsersCreateNestedOneWithoutOrdersInput
    Review?: ReviewsCreateNestedOneWithoutOrderInput
    OrdersItems?: OrdersItemsCreateNestedManyWithoutOrderInput
  }

  export type OrdersUncheckedCreateWithoutStoreInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    userId: number
    Review?: ReviewsUncheckedCreateNestedOneWithoutOrderInput
    OrdersItems?: OrdersItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrdersCreateOrConnectWithoutStoreInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutStoreInput, OrdersUncheckedCreateWithoutStoreInput>
  }

  export type OrdersCreateManyStoreInputEnvelope = {
    data: OrdersCreateManyStoreInput | OrdersCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutStoreInput = {
    update: XOR<UsersUpdateWithoutStoreInput, UsersUncheckedUpdateWithoutStoreInput>
    create: XOR<UsersCreateWithoutStoreInput, UsersUncheckedCreateWithoutStoreInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutStoreInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutStoreInput, UsersUncheckedUpdateWithoutStoreInput>
  }

  export type UsersUpdateWithoutStoreInput = {
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUpdateManyWithoutUserNestedInput
    Orders?: OrdersUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutStoreInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LikesUpsertWithWhereUniqueWithoutStoreInput = {
    where: LikesWhereUniqueInput
    update: XOR<LikesUpdateWithoutStoreInput, LikesUncheckedUpdateWithoutStoreInput>
    create: XOR<LikesCreateWithoutStoreInput, LikesUncheckedCreateWithoutStoreInput>
  }

  export type LikesUpdateWithWhereUniqueWithoutStoreInput = {
    where: LikesWhereUniqueInput
    data: XOR<LikesUpdateWithoutStoreInput, LikesUncheckedUpdateWithoutStoreInput>
  }

  export type LikesUpdateManyWithWhereWithoutStoreInput = {
    where: LikesScalarWhereInput
    data: XOR<LikesUpdateManyMutationInput, LikesUncheckedUpdateManyWithoutStoreInput>
  }

  export type ItemsUpsertWithWhereUniqueWithoutStoreInput = {
    where: ItemsWhereUniqueInput
    update: XOR<ItemsUpdateWithoutStoreInput, ItemsUncheckedUpdateWithoutStoreInput>
    create: XOR<ItemsCreateWithoutStoreInput, ItemsUncheckedCreateWithoutStoreInput>
  }

  export type ItemsUpdateWithWhereUniqueWithoutStoreInput = {
    where: ItemsWhereUniqueInput
    data: XOR<ItemsUpdateWithoutStoreInput, ItemsUncheckedUpdateWithoutStoreInput>
  }

  export type ItemsUpdateManyWithWhereWithoutStoreInput = {
    where: ItemsScalarWhereInput
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyWithoutStoreInput>
  }

  export type ItemsScalarWhereInput = {
    AND?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
    OR?: ItemsScalarWhereInput[]
    NOT?: ItemsScalarWhereInput | ItemsScalarWhereInput[]
    itemId?: IntFilter<"Items"> | number
    name?: StringFilter<"Items"> | string
    prevPrice?: IntFilter<"Items"> | number
    price?: IntFilter<"Items"> | number
    count?: IntFilter<"Items"> | number
    startTime?: DateTimeFilter<"Items"> | Date | string
    endTime?: DateTimeFilter<"Items"> | Date | string
    imgUrl?: StringNullableFilter<"Items"> | string | null
    content?: StringFilter<"Items"> | string
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Items"> | Date | string | null
    storeId?: IntFilter<"Items"> | number
  }

  export type ReviewsUpsertWithWhereUniqueWithoutStoreInput = {
    where: ReviewsWhereUniqueInput
    update: XOR<ReviewsUpdateWithoutStoreInput, ReviewsUncheckedUpdateWithoutStoreInput>
    create: XOR<ReviewsCreateWithoutStoreInput, ReviewsUncheckedCreateWithoutStoreInput>
  }

  export type ReviewsUpdateWithWhereUniqueWithoutStoreInput = {
    where: ReviewsWhereUniqueInput
    data: XOR<ReviewsUpdateWithoutStoreInput, ReviewsUncheckedUpdateWithoutStoreInput>
  }

  export type ReviewsUpdateManyWithWhereWithoutStoreInput = {
    where: ReviewsScalarWhereInput
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyWithoutStoreInput>
  }

  export type AlarmsUpsertWithWhereUniqueWithoutStoreInput = {
    where: AlarmsWhereUniqueInput
    update: XOR<AlarmsUpdateWithoutStoreInput, AlarmsUncheckedUpdateWithoutStoreInput>
    create: XOR<AlarmsCreateWithoutStoreInput, AlarmsUncheckedCreateWithoutStoreInput>
  }

  export type AlarmsUpdateWithWhereUniqueWithoutStoreInput = {
    where: AlarmsWhereUniqueInput
    data: XOR<AlarmsUpdateWithoutStoreInput, AlarmsUncheckedUpdateWithoutStoreInput>
  }

  export type AlarmsUpdateManyWithWhereWithoutStoreInput = {
    where: AlarmsScalarWhereInput
    data: XOR<AlarmsUpdateManyMutationInput, AlarmsUncheckedUpdateManyWithoutStoreInput>
  }

  export type AlarmsScalarWhereInput = {
    AND?: AlarmsScalarWhereInput | AlarmsScalarWhereInput[]
    OR?: AlarmsScalarWhereInput[]
    NOT?: AlarmsScalarWhereInput | AlarmsScalarWhereInput[]
    alarmId?: IntFilter<"Alarms"> | number
    title?: StringFilter<"Alarms"> | string
    content?: StringFilter<"Alarms"> | string
    createdAt?: DateTimeFilter<"Alarms"> | Date | string
    storeId?: IntFilter<"Alarms"> | number
  }

  export type OrdersUpsertWithWhereUniqueWithoutStoreInput = {
    where: OrdersWhereUniqueInput
    update: XOR<OrdersUpdateWithoutStoreInput, OrdersUncheckedUpdateWithoutStoreInput>
    create: XOR<OrdersCreateWithoutStoreInput, OrdersUncheckedCreateWithoutStoreInput>
  }

  export type OrdersUpdateWithWhereUniqueWithoutStoreInput = {
    where: OrdersWhereUniqueInput
    data: XOR<OrdersUpdateWithoutStoreInput, OrdersUncheckedUpdateWithoutStoreInput>
  }

  export type OrdersUpdateManyWithWhereWithoutStoreInput = {
    where: OrdersScalarWhereInput
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyWithoutStoreInput>
  }

  export type UsersCreateWithoutLikesInput = {
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Orders?: OrdersCreateNestedManyWithoutUserInput
    Reviews?: ReviewsCreateNestedManyWithoutUserInput
    Store?: StoresCreateNestedOneWithoutOwnerInput
  }

  export type UsersUncheckedCreateWithoutLikesInput = {
    userId?: number
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Orders?: OrdersUncheckedCreateNestedManyWithoutUserInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutUserInput
    Store?: StoresUncheckedCreateNestedOneWithoutOwnerInput
  }

  export type UsersCreateOrConnectWithoutLikesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
  }

  export type StoresCreateWithoutLikesInput = {
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Owner?: UsersCreateNestedOneWithoutStoreInput
    Items?: ItemsCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsCreateNestedManyWithoutStoreInput
    Orders?: OrdersCreateNestedManyWithoutStoreInput
  }

  export type StoresUncheckedCreateWithoutLikesInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    ownerId?: number | null
    Items?: ItemsUncheckedCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsUncheckedCreateNestedManyWithoutStoreInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoresCreateOrConnectWithoutLikesInput = {
    where: StoresWhereUniqueInput
    create: XOR<StoresCreateWithoutLikesInput, StoresUncheckedCreateWithoutLikesInput>
  }

  export type UsersUpsertWithoutLikesInput = {
    update: XOR<UsersUpdateWithoutLikesInput, UsersUncheckedUpdateWithoutLikesInput>
    create: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutLikesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutLikesInput, UsersUncheckedUpdateWithoutLikesInput>
  }

  export type UsersUpdateWithoutLikesInput = {
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Orders?: OrdersUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUpdateManyWithoutUserNestedInput
    Store?: StoresUpdateOneWithoutOwnerNestedInput
  }

  export type UsersUncheckedUpdateWithoutLikesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Orders?: OrdersUncheckedUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutUserNestedInput
    Store?: StoresUncheckedUpdateOneWithoutOwnerNestedInput
  }

  export type StoresUpsertWithoutLikesInput = {
    update: XOR<StoresUpdateWithoutLikesInput, StoresUncheckedUpdateWithoutLikesInput>
    create: XOR<StoresCreateWithoutLikesInput, StoresUncheckedCreateWithoutLikesInput>
    where?: StoresWhereInput
  }

  export type StoresUpdateToOneWithWhereWithoutLikesInput = {
    where?: StoresWhereInput
    data: XOR<StoresUpdateWithoutLikesInput, StoresUncheckedUpdateWithoutLikesInput>
  }

  export type StoresUpdateWithoutLikesInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UsersUpdateOneWithoutStoreNestedInput
    Items?: ItemsUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUpdateManyWithoutStoreNestedInput
  }

  export type StoresUncheckedUpdateWithoutLikesInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    Items?: ItemsUncheckedUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUncheckedUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoresCreateWithoutReviewsInput = {
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Owner?: UsersCreateNestedOneWithoutStoreInput
    Likes?: LikesCreateNestedManyWithoutStoreInput
    Items?: ItemsCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsCreateNestedManyWithoutStoreInput
    Orders?: OrdersCreateNestedManyWithoutStoreInput
  }

  export type StoresUncheckedCreateWithoutReviewsInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    ownerId?: number | null
    Likes?: LikesUncheckedCreateNestedManyWithoutStoreInput
    Items?: ItemsUncheckedCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsUncheckedCreateNestedManyWithoutStoreInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoresCreateOrConnectWithoutReviewsInput = {
    where: StoresWhereUniqueInput
    create: XOR<StoresCreateWithoutReviewsInput, StoresUncheckedCreateWithoutReviewsInput>
  }

  export type UsersCreateWithoutReviewsInput = {
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesCreateNestedManyWithoutUserInput
    Orders?: OrdersCreateNestedManyWithoutUserInput
    Store?: StoresCreateNestedOneWithoutOwnerInput
  }

  export type UsersUncheckedCreateWithoutReviewsInput = {
    userId?: number
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutUserInput
    Store?: StoresUncheckedCreateNestedOneWithoutOwnerInput
  }

  export type UsersCreateOrConnectWithoutReviewsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
  }

  export type OrdersCreateWithoutReviewInput = {
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    User: UsersCreateNestedOneWithoutOrdersInput
    Store: StoresCreateNestedOneWithoutOrdersInput
    OrdersItems?: OrdersItemsCreateNestedManyWithoutOrderInput
  }

  export type OrdersUncheckedCreateWithoutReviewInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    userId: number
    storeId: number
    OrdersItems?: OrdersItemsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrdersCreateOrConnectWithoutReviewInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutReviewInput, OrdersUncheckedCreateWithoutReviewInput>
  }

  export type StoresUpsertWithoutReviewsInput = {
    update: XOR<StoresUpdateWithoutReviewsInput, StoresUncheckedUpdateWithoutReviewsInput>
    create: XOR<StoresCreateWithoutReviewsInput, StoresUncheckedCreateWithoutReviewsInput>
    where?: StoresWhereInput
  }

  export type StoresUpdateToOneWithWhereWithoutReviewsInput = {
    where?: StoresWhereInput
    data: XOR<StoresUpdateWithoutReviewsInput, StoresUncheckedUpdateWithoutReviewsInput>
  }

  export type StoresUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UsersUpdateOneWithoutStoreNestedInput
    Likes?: LikesUpdateManyWithoutStoreNestedInput
    Items?: ItemsUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUpdateManyWithoutStoreNestedInput
  }

  export type StoresUncheckedUpdateWithoutReviewsInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    Likes?: LikesUncheckedUpdateManyWithoutStoreNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUncheckedUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type UsersUpsertWithoutReviewsInput = {
    update: XOR<UsersUpdateWithoutReviewsInput, UsersUncheckedUpdateWithoutReviewsInput>
    create: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutReviewsInput, UsersUncheckedUpdateWithoutReviewsInput>
  }

  export type UsersUpdateWithoutReviewsInput = {
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUpdateManyWithoutUserNestedInput
    Orders?: OrdersUpdateManyWithoutUserNestedInput
    Store?: StoresUpdateOneWithoutOwnerNestedInput
  }

  export type UsersUncheckedUpdateWithoutReviewsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutUserNestedInput
    Store?: StoresUncheckedUpdateOneWithoutOwnerNestedInput
  }

  export type OrdersUpsertWithoutReviewInput = {
    update: XOR<OrdersUpdateWithoutReviewInput, OrdersUncheckedUpdateWithoutReviewInput>
    create: XOR<OrdersCreateWithoutReviewInput, OrdersUncheckedCreateWithoutReviewInput>
    where?: OrdersWhereInput
  }

  export type OrdersUpdateToOneWithWhereWithoutReviewInput = {
    where?: OrdersWhereInput
    data: XOR<OrdersUpdateWithoutReviewInput, OrdersUncheckedUpdateWithoutReviewInput>
  }

  export type OrdersUpdateWithoutReviewInput = {
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    User?: UsersUpdateOneRequiredWithoutOrdersNestedInput
    Store?: StoresUpdateOneRequiredWithoutOrdersNestedInput
    OrdersItems?: OrdersItemsUpdateManyWithoutOrderNestedInput
  }

  export type OrdersUncheckedUpdateWithoutReviewInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    storeId?: IntFieldUpdateOperationsInput | number
    OrdersItems?: OrdersItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type UsersCreateWithoutOrdersInput = {
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesCreateNestedManyWithoutUserInput
    Reviews?: ReviewsCreateNestedManyWithoutUserInput
    Store?: StoresCreateNestedOneWithoutOwnerInput
  }

  export type UsersUncheckedCreateWithoutOrdersInput = {
    userId?: number
    isClient: boolean
    email: string
    password: string
    name: string
    point?: number
    nickname: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutUserInput
    Store?: StoresUncheckedCreateNestedOneWithoutOwnerInput
  }

  export type UsersCreateOrConnectWithoutOrdersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
  }

  export type StoresCreateWithoutOrdersInput = {
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Owner?: UsersCreateNestedOneWithoutStoreInput
    Likes?: LikesCreateNestedManyWithoutStoreInput
    Items?: ItemsCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsCreateNestedManyWithoutStoreInput
  }

  export type StoresUncheckedCreateWithoutOrdersInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    ownerId?: number | null
    Likes?: LikesUncheckedCreateNestedManyWithoutStoreInput
    Items?: ItemsUncheckedCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoresCreateOrConnectWithoutOrdersInput = {
    where: StoresWhereUniqueInput
    create: XOR<StoresCreateWithoutOrdersInput, StoresUncheckedCreateWithoutOrdersInput>
  }

  export type ReviewsCreateWithoutOrderInput = {
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    Store: StoresCreateNestedOneWithoutReviewsInput
    User: UsersCreateNestedOneWithoutReviewsInput
  }

  export type ReviewsUncheckedCreateWithoutOrderInput = {
    reviewId?: number
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
    userId: number
  }

  export type ReviewsCreateOrConnectWithoutOrderInput = {
    where: ReviewsWhereUniqueInput
    create: XOR<ReviewsCreateWithoutOrderInput, ReviewsUncheckedCreateWithoutOrderInput>
  }

  export type OrdersItemsCreateWithoutOrderInput = {
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Item: ItemsCreateNestedOneWithoutOrdersItemsInput
  }

  export type OrdersItemsUncheckedCreateWithoutOrderInput = {
    orderItemId?: number
    count: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type OrdersItemsCreateOrConnectWithoutOrderInput = {
    where: OrdersItemsWhereUniqueInput
    create: XOR<OrdersItemsCreateWithoutOrderInput, OrdersItemsUncheckedCreateWithoutOrderInput>
  }

  export type OrdersItemsCreateManyOrderInputEnvelope = {
    data: OrdersItemsCreateManyOrderInput | OrdersItemsCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutOrdersInput = {
    update: XOR<UsersUpdateWithoutOrdersInput, UsersUncheckedUpdateWithoutOrdersInput>
    create: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutOrdersInput, UsersUncheckedUpdateWithoutOrdersInput>
  }

  export type UsersUpdateWithoutOrdersInput = {
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUpdateManyWithoutUserNestedInput
    Store?: StoresUpdateOneWithoutOwnerNestedInput
  }

  export type UsersUncheckedUpdateWithoutOrdersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isClient?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutUserNestedInput
    Store?: StoresUncheckedUpdateOneWithoutOwnerNestedInput
  }

  export type StoresUpsertWithoutOrdersInput = {
    update: XOR<StoresUpdateWithoutOrdersInput, StoresUncheckedUpdateWithoutOrdersInput>
    create: XOR<StoresCreateWithoutOrdersInput, StoresUncheckedCreateWithoutOrdersInput>
    where?: StoresWhereInput
  }

  export type StoresUpdateToOneWithWhereWithoutOrdersInput = {
    where?: StoresWhereInput
    data: XOR<StoresUpdateWithoutOrdersInput, StoresUncheckedUpdateWithoutOrdersInput>
  }

  export type StoresUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UsersUpdateOneWithoutStoreNestedInput
    Likes?: LikesUpdateManyWithoutStoreNestedInput
    Items?: ItemsUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUpdateManyWithoutStoreNestedInput
  }

  export type StoresUncheckedUpdateWithoutOrdersInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    Likes?: LikesUncheckedUpdateManyWithoutStoreNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type ReviewsUpsertWithoutOrderInput = {
    update: XOR<ReviewsUpdateWithoutOrderInput, ReviewsUncheckedUpdateWithoutOrderInput>
    create: XOR<ReviewsCreateWithoutOrderInput, ReviewsUncheckedCreateWithoutOrderInput>
    where?: ReviewsWhereInput
  }

  export type ReviewsUpdateToOneWithWhereWithoutOrderInput = {
    where?: ReviewsWhereInput
    data: XOR<ReviewsUpdateWithoutOrderInput, ReviewsUncheckedUpdateWithoutOrderInput>
  }

  export type ReviewsUpdateWithoutOrderInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Store?: StoresUpdateOneRequiredWithoutReviewsNestedInput
    User?: UsersUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateWithoutOrderInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type OrdersItemsUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrdersItemsWhereUniqueInput
    update: XOR<OrdersItemsUpdateWithoutOrderInput, OrdersItemsUncheckedUpdateWithoutOrderInput>
    create: XOR<OrdersItemsCreateWithoutOrderInput, OrdersItemsUncheckedCreateWithoutOrderInput>
  }

  export type OrdersItemsUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrdersItemsWhereUniqueInput
    data: XOR<OrdersItemsUpdateWithoutOrderInput, OrdersItemsUncheckedUpdateWithoutOrderInput>
  }

  export type OrdersItemsUpdateManyWithWhereWithoutOrderInput = {
    where: OrdersItemsScalarWhereInput
    data: XOR<OrdersItemsUpdateManyMutationInput, OrdersItemsUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrdersItemsScalarWhereInput = {
    AND?: OrdersItemsScalarWhereInput | OrdersItemsScalarWhereInput[]
    OR?: OrdersItemsScalarWhereInput[]
    NOT?: OrdersItemsScalarWhereInput | OrdersItemsScalarWhereInput[]
    orderItemId?: IntFilter<"OrdersItems"> | number
    count?: IntFilter<"OrdersItems"> | number
    orderId?: IntFilter<"OrdersItems"> | number
    itemId?: IntFilter<"OrdersItems"> | number
    createdAt?: DateTimeFilter<"OrdersItems"> | Date | string
    updatedAt?: DateTimeFilter<"OrdersItems"> | Date | string
    deletedAt?: DateTimeNullableFilter<"OrdersItems"> | Date | string | null
  }

  export type OrdersCreateWithoutOrdersItemsInput = {
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    User: UsersCreateNestedOneWithoutOrdersInput
    Store: StoresCreateNestedOneWithoutOrdersInput
    Review?: ReviewsCreateNestedOneWithoutOrderInput
  }

  export type OrdersUncheckedCreateWithoutOrdersItemsInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    userId: number
    storeId: number
    Review?: ReviewsUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrdersCreateOrConnectWithoutOrdersItemsInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutOrdersItemsInput, OrdersUncheckedCreateWithoutOrdersItemsInput>
  }

  export type ItemsCreateWithoutOrdersItemsInput = {
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Store: StoresCreateNestedOneWithoutItemsInput
  }

  export type ItemsUncheckedCreateWithoutOrdersItemsInput = {
    itemId?: number
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
  }

  export type ItemsCreateOrConnectWithoutOrdersItemsInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutOrdersItemsInput, ItemsUncheckedCreateWithoutOrdersItemsInput>
  }

  export type OrdersUpsertWithoutOrdersItemsInput = {
    update: XOR<OrdersUpdateWithoutOrdersItemsInput, OrdersUncheckedUpdateWithoutOrdersItemsInput>
    create: XOR<OrdersCreateWithoutOrdersItemsInput, OrdersUncheckedCreateWithoutOrdersItemsInput>
    where?: OrdersWhereInput
  }

  export type OrdersUpdateToOneWithWhereWithoutOrdersItemsInput = {
    where?: OrdersWhereInput
    data: XOR<OrdersUpdateWithoutOrdersItemsInput, OrdersUncheckedUpdateWithoutOrdersItemsInput>
  }

  export type OrdersUpdateWithoutOrdersItemsInput = {
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    User?: UsersUpdateOneRequiredWithoutOrdersNestedInput
    Store?: StoresUpdateOneRequiredWithoutOrdersNestedInput
    Review?: ReviewsUpdateOneWithoutOrderNestedInput
  }

  export type OrdersUncheckedUpdateWithoutOrdersItemsInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    storeId?: IntFieldUpdateOperationsInput | number
    Review?: ReviewsUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type ItemsUpsertWithoutOrdersItemsInput = {
    update: XOR<ItemsUpdateWithoutOrdersItemsInput, ItemsUncheckedUpdateWithoutOrdersItemsInput>
    create: XOR<ItemsCreateWithoutOrdersItemsInput, ItemsUncheckedCreateWithoutOrdersItemsInput>
    where?: ItemsWhereInput
  }

  export type ItemsUpdateToOneWithWhereWithoutOrdersItemsInput = {
    where?: ItemsWhereInput
    data: XOR<ItemsUpdateWithoutOrdersItemsInput, ItemsUncheckedUpdateWithoutOrdersItemsInput>
  }

  export type ItemsUpdateWithoutOrdersItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Store?: StoresUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemsUncheckedUpdateWithoutOrdersItemsInput = {
    itemId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type StoresCreateWithoutItemsInput = {
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Owner?: UsersCreateNestedOneWithoutStoreInput
    Likes?: LikesCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsCreateNestedManyWithoutStoreInput
    Orders?: OrdersCreateNestedManyWithoutStoreInput
  }

  export type StoresUncheckedCreateWithoutItemsInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    ownerId?: number | null
    Likes?: LikesUncheckedCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutStoreInput
    Alarms?: AlarmsUncheckedCreateNestedManyWithoutStoreInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoresCreateOrConnectWithoutItemsInput = {
    where: StoresWhereUniqueInput
    create: XOR<StoresCreateWithoutItemsInput, StoresUncheckedCreateWithoutItemsInput>
  }

  export type OrdersItemsCreateWithoutItemInput = {
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    Order: OrdersCreateNestedOneWithoutOrdersItemsInput
  }

  export type OrdersItemsUncheckedCreateWithoutItemInput = {
    orderItemId?: number
    count: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type OrdersItemsCreateOrConnectWithoutItemInput = {
    where: OrdersItemsWhereUniqueInput
    create: XOR<OrdersItemsCreateWithoutItemInput, OrdersItemsUncheckedCreateWithoutItemInput>
  }

  export type OrdersItemsCreateManyItemInputEnvelope = {
    data: OrdersItemsCreateManyItemInput | OrdersItemsCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type StoresUpsertWithoutItemsInput = {
    update: XOR<StoresUpdateWithoutItemsInput, StoresUncheckedUpdateWithoutItemsInput>
    create: XOR<StoresCreateWithoutItemsInput, StoresUncheckedCreateWithoutItemsInput>
    where?: StoresWhereInput
  }

  export type StoresUpdateToOneWithWhereWithoutItemsInput = {
    where?: StoresWhereInput
    data: XOR<StoresUpdateWithoutItemsInput, StoresUncheckedUpdateWithoutItemsInput>
  }

  export type StoresUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UsersUpdateOneWithoutStoreNestedInput
    Likes?: LikesUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUpdateManyWithoutStoreNestedInput
  }

  export type StoresUncheckedUpdateWithoutItemsInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    Likes?: LikesUncheckedUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutStoreNestedInput
    Alarms?: AlarmsUncheckedUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type OrdersItemsUpsertWithWhereUniqueWithoutItemInput = {
    where: OrdersItemsWhereUniqueInput
    update: XOR<OrdersItemsUpdateWithoutItemInput, OrdersItemsUncheckedUpdateWithoutItemInput>
    create: XOR<OrdersItemsCreateWithoutItemInput, OrdersItemsUncheckedCreateWithoutItemInput>
  }

  export type OrdersItemsUpdateWithWhereUniqueWithoutItemInput = {
    where: OrdersItemsWhereUniqueInput
    data: XOR<OrdersItemsUpdateWithoutItemInput, OrdersItemsUncheckedUpdateWithoutItemInput>
  }

  export type OrdersItemsUpdateManyWithWhereWithoutItemInput = {
    where: OrdersItemsScalarWhereInput
    data: XOR<OrdersItemsUpdateManyMutationInput, OrdersItemsUncheckedUpdateManyWithoutItemInput>
  }

  export type StoresCreateWithoutAlarmsInput = {
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    Owner?: UsersCreateNestedOneWithoutStoreInput
    Likes?: LikesCreateNestedManyWithoutStoreInput
    Items?: ItemsCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsCreateNestedManyWithoutStoreInput
    Orders?: OrdersCreateNestedManyWithoutStoreInput
  }

  export type StoresUncheckedCreateWithoutAlarmsInput = {
    storeId?: number
    name: string
    longitude: number
    latitude: number
    address: string
    storePhoneNumber?: string | null
    category: string
    managementNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    ownerId?: number | null
    Likes?: LikesUncheckedCreateNestedManyWithoutStoreInput
    Items?: ItemsUncheckedCreateNestedManyWithoutStoreInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutStoreInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoresCreateOrConnectWithoutAlarmsInput = {
    where: StoresWhereUniqueInput
    create: XOR<StoresCreateWithoutAlarmsInput, StoresUncheckedCreateWithoutAlarmsInput>
  }

  export type StoresUpsertWithoutAlarmsInput = {
    update: XOR<StoresUpdateWithoutAlarmsInput, StoresUncheckedUpdateWithoutAlarmsInput>
    create: XOR<StoresCreateWithoutAlarmsInput, StoresUncheckedCreateWithoutAlarmsInput>
    where?: StoresWhereInput
  }

  export type StoresUpdateToOneWithWhereWithoutAlarmsInput = {
    where?: StoresWhereInput
    data: XOR<StoresUpdateWithoutAlarmsInput, StoresUncheckedUpdateWithoutAlarmsInput>
  }

  export type StoresUpdateWithoutAlarmsInput = {
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UsersUpdateOneWithoutStoreNestedInput
    Likes?: LikesUpdateManyWithoutStoreNestedInput
    Items?: ItemsUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUpdateManyWithoutStoreNestedInput
  }

  export type StoresUncheckedUpdateWithoutAlarmsInput = {
    storeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    storePhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    managementNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    Likes?: LikesUncheckedUpdateManyWithoutStoreNestedInput
    Items?: ItemsUncheckedUpdateManyWithoutStoreNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutStoreNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type LikesCreateManyUserInput = {
    likeId?: number
    createdAt?: Date | string
    storeId: number
  }

  export type OrdersCreateManyUserInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    storeId: number
  }

  export type ReviewsCreateManyUserInput = {
    reviewId?: number
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    storeId: number
    orderId: number
  }

  export type LikesUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Store?: StoresUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikesUncheckedUpdateWithoutUserInput = {
    likeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type LikesUncheckedUpdateManyWithoutUserInput = {
    likeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type OrdersUpdateWithoutUserInput = {
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    Store?: StoresUpdateOneRequiredWithoutOrdersNestedInput
    Review?: ReviewsUpdateOneWithoutOrderNestedInput
    OrdersItems?: OrdersItemsUpdateManyWithoutOrderNestedInput
  }

  export type OrdersUncheckedUpdateWithoutUserInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    storeId?: IntFieldUpdateOperationsInput | number
    Review?: ReviewsUncheckedUpdateOneWithoutOrderNestedInput
    OrdersItems?: OrdersItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrdersUncheckedUpdateManyWithoutUserInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    storeId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Store?: StoresUpdateOneRequiredWithoutReviewsNestedInput
    Order?: OrdersUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewsUncheckedUpdateWithoutUserInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsUncheckedUpdateManyWithoutUserInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type LikesCreateManyStoreInput = {
    likeId?: number
    createdAt?: Date | string
    userId: number
  }

  export type ItemsCreateManyStoreInput = {
    itemId?: number
    name: string
    prevPrice: number
    price: number
    count: number
    startTime: Date | string
    endTime: Date | string
    imgUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ReviewsCreateManyStoreInput = {
    reviewId?: number
    content: string
    star: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    userId: number
    orderId: number
  }

  export type AlarmsCreateManyStoreInput = {
    alarmId?: number
    title: string
    content: string
    createdAt?: Date | string
  }

  export type OrdersCreateManyStoreInput = {
    orderId?: number
    discount: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    ordered?: boolean
    userId: number
  }

  export type LikesUpdateWithoutStoreInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikesUncheckedUpdateWithoutStoreInput = {
    likeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type LikesUncheckedUpdateManyWithoutStoreInput = {
    likeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsUpdateWithoutStoreInput = {
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OrdersItems?: OrdersItemsUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateWithoutStoreInput = {
    itemId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OrdersItems?: OrdersItemsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemsUncheckedUpdateManyWithoutStoreInput = {
    itemId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    prevPrice?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewsUpdateWithoutStoreInput = {
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UsersUpdateOneRequiredWithoutReviewsNestedInput
    Order?: OrdersUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewsUncheckedUpdateWithoutStoreInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsUncheckedUpdateManyWithoutStoreInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    star?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type AlarmsUpdateWithoutStoreInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmsUncheckedUpdateWithoutStoreInput = {
    alarmId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmsUncheckedUpdateManyWithoutStoreInput = {
    alarmId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrdersUpdateWithoutStoreInput = {
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    User?: UsersUpdateOneRequiredWithoutOrdersNestedInput
    Review?: ReviewsUpdateOneWithoutOrderNestedInput
    OrdersItems?: OrdersItemsUpdateManyWithoutOrderNestedInput
  }

  export type OrdersUncheckedUpdateWithoutStoreInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    Review?: ReviewsUncheckedUpdateOneWithoutOrderNestedInput
    OrdersItems?: OrdersItemsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrdersUncheckedUpdateManyWithoutStoreInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    totalPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ordered?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type OrdersItemsCreateManyOrderInput = {
    orderItemId?: number
    count: number
    itemId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type OrdersItemsUpdateWithoutOrderInput = {
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Item?: ItemsUpdateOneRequiredWithoutOrdersItemsNestedInput
  }

  export type OrdersItemsUncheckedUpdateWithoutOrderInput = {
    orderItemId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdersItemsUncheckedUpdateManyWithoutOrderInput = {
    orderItemId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdersItemsCreateManyItemInput = {
    orderItemId?: number
    count: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type OrdersItemsUpdateWithoutItemInput = {
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Order?: OrdersUpdateOneRequiredWithoutOrdersItemsNestedInput
  }

  export type OrdersItemsUncheckedUpdateWithoutItemInput = {
    orderItemId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrdersItemsUncheckedUpdateManyWithoutItemInput = {
    orderItemId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoresCountOutputTypeDefaultArgs instead
     */
    export type StoresCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoresCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrdersCountOutputTypeDefaultArgs instead
     */
    export type OrdersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemsCountOutputTypeDefaultArgs instead
     */
    export type ItemsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoresDefaultArgs instead
     */
    export type StoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoresDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikesDefaultArgs instead
     */
    export type LikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewsDefaultArgs instead
     */
    export type ReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrdersDefaultArgs instead
     */
    export type OrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrdersItemsDefaultArgs instead
     */
    export type OrdersItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemsDefaultArgs instead
     */
    export type ItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlarmsDefaultArgs instead
     */
    export type AlarmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlarmsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}